#![allow(clippy::missing_safety_doc)]
                #![allow(clippy::identity_op)]
                #![allow(clippy::unnecessary_cast)]
                #![allow(clippy::erasing_op)]

# [doc = "Factory configuration bytes."]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Configbytes { ptr : * mut u8 } unsafe impl Send for Configbytes { } unsafe impl Sync for Configbytes { } impl Configbytes { # [inline (always)]
pub const unsafe fn from_ptr (ptr : * mut ()) -> Self { Self { ptr : ptr as _ , } } # [inline (always)]
pub const fn as_ptr (& self) -> * mut () { self . ptr as _ } # [doc = "HSI 24 Hz frequency selection control and corresponding trimming value"]
# [inline (always)]
pub const fn hsi_trimming (self) -> crate :: common :: Reg < regs :: HsiTrimming , crate :: common :: R > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x0100usize) as _) } } # [doc = "FLASH configuration values. 24MHz."]
# [inline (always)]
pub const fn eppara (self) -> Eppara { unsafe { Eppara :: from_ptr (self . ptr . add (0x011cusize) as _) } } } # [derive (Copy , Clone , Eq , PartialEq)]
pub struct Eppara { ptr : * mut u8 } unsafe impl Send for Eppara { } unsafe impl Sync for Eppara { } impl Eppara { # [inline (always)]
pub const unsafe fn from_ptr (ptr : * mut ()) -> Self { Self { ptr : ptr as _ , } } # [inline (always)]
pub const fn as_ptr (& self) -> * mut () { self . ptr as _ } # [doc = "FLASH_TS0, FLASH_TS1, FLASH_TS3 configuration values."]
# [inline (always)]
pub const fn eppara0 (self) -> crate :: common :: Reg < regs :: Eppara0 , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x0usize) as _) } } # [doc = "FLASH_TS2P, FLASH_TPS3 configuration values."]
# [inline (always)]
pub const fn eppara1 (self) -> crate :: common :: Reg < regs :: Eppara1 , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x04usize) as _) } } # [doc = "FLASH_PERTPE configuration values."]
# [inline (always)]
pub const fn eppara2 (self) -> crate :: common :: Reg < regs :: Eppara2 , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x08usize) as _) } } # [doc = "FLASH_SMERTPE configuration values."]
# [inline (always)]
pub const fn eppara3 (self) -> crate :: common :: Reg < regs :: Eppara3 , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x0cusize) as _) } } # [doc = "FLASH_PRGTPE, FLASH_PRETPE configuration values."]
# [inline (always)]
pub const fn eppara4 (self) -> crate :: common :: Reg < regs :: Eppara4 , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x10usize) as _) } } } pub mod regs { # [doc = "FLASH_TSO, FLASH_TS1 configuration values."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Eppara0 (pub u32) ; impl Eppara0 { # [doc = "TS0 value."]
# [inline (always)]
pub const fn ts0 (& self) -> u16 { let val = (self . 0 >> 0usize) & 0x01ff ; val as u16 } # [doc = "TS0 value."]
# [inline (always)]
pub fn set_ts0 (& mut self , val : u16) { self . 0 = (self . 0 & ! (0x01ff << 0usize)) | (((val as u32) & 0x01ff) << 0usize) ; } # [doc = "TS3 value."]
# [inline (always)]
pub const fn ts3 (& self) -> u16 { let val = (self . 0 >> 9usize) & 0x01ff ; val as u16 } # [doc = "TS3 value."]
# [inline (always)]
pub fn set_ts3 (& mut self , val : u16) { self . 0 = (self . 0 & ! (0x01ff << 9usize)) | (((val as u32) & 0x01ff) << 9usize) ; } # [doc = "TS1 value."]
# [inline (always)]
pub const fn ts1 (& self) -> u16 { let val = (self . 0 >> 18usize) & 0x03ff ; val as u16 } # [doc = "TS1 value."]
# [inline (always)]
pub fn set_ts1 (& mut self , val : u16) { self . 0 = (self . 0 & ! (0x03ff << 18usize)) | (((val as u32) & 0x03ff) << 18usize) ; } } impl Default for Eppara0 { # [inline (always)]
fn default () -> Eppara0 { Eppara0 (0) } } # [doc = "FLASH_TS2P, FLASH_TPS3 configuration values."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Eppara1 (pub u32) ; impl Eppara1 { # [doc = "TS2P value."]
# [inline (always)]
pub const fn ts2p (& self) -> u16 { let val = (self . 0 >> 0usize) & 0x01ff ; val as u16 } # [doc = "TS2P value."]
# [inline (always)]
pub fn set_ts2p (& mut self , val : u16) { self . 0 = (self . 0 & ! (0x01ff << 0usize)) | (((val as u32) & 0x01ff) << 0usize) ; } # [doc = "TPS3 value."]
# [inline (always)]
pub const fn tps3 (& self) -> u16 { let val = (self . 0 >> 16usize) & 0x0fff ; val as u16 } # [doc = "TPS3 value."]
# [inline (always)]
pub fn set_tps3 (& mut self , val : u16) { self . 0 = (self . 0 & ! (0x0fff << 16usize)) | (((val as u32) & 0x0fff) << 16usize) ; } } impl Default for Eppara1 { # [inline (always)]
fn default () -> Eppara1 { Eppara1 (0) } } # [doc = "FLASH_PERTPE configuration values."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Eppara2 (pub u32) ; impl Eppara2 { # [doc = "PERTPE value."]
# [inline (always)]
pub const fn pertpe (& self) -> u32 { let val = (self . 0 >> 0usize) & 0x0003_ffff ; val as u32 } # [doc = "PERTPE value."]
# [inline (always)]
pub fn set_pertpe (& mut self , val : u32) { self . 0 = (self . 0 & ! (0x0003_ffff << 0usize)) | (((val as u32) & 0x0003_ffff) << 0usize) ; } } impl Default for Eppara2 { # [inline (always)]
fn default () -> Eppara2 { Eppara2 (0) } } # [doc = "FLASH_SMERTPE configuration values."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Eppara3 (pub u32) ; impl Eppara3 { # [doc = "SMERTPE value."]
# [inline (always)]
pub const fn smertpe (& self) -> u32 { let val = (self . 0 >> 0usize) & 0x0003_ffff ; val as u32 } # [doc = "SMERTPE value."]
# [inline (always)]
pub fn set_smertpe (& mut self , val : u32) { self . 0 = (self . 0 & ! (0x0003_ffff << 0usize)) | (((val as u32) & 0x0003_ffff) << 0usize) ; } } impl Default for Eppara3 { # [inline (always)]
fn default () -> Eppara3 { Eppara3 (0) } } # [doc = "FLASH_PRGTPE, FLASH_PRETPE configuration values."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Eppara4 (pub u32) ; impl Eppara4 { # [doc = "PRGTPE value."]
# [inline (always)]
pub const fn prgtpe (& self) -> u16 { let val = (self . 0 >> 0usize) & 0xffff ; val as u16 } # [doc = "PRGTPE value."]
# [inline (always)]
pub fn set_prgtpe (& mut self , val : u16) { self . 0 = (self . 0 & ! (0xffff << 0usize)) | (((val as u32) & 0xffff) << 0usize) ; } # [doc = "PRETPE value."]
# [inline (always)]
pub const fn pretpe (& self) -> u16 { let val = (self . 0 >> 16usize) & 0x3fff ; val as u16 } # [doc = "PRETPE value."]
# [inline (always)]
pub fn set_pretpe (& mut self , val : u16) { self . 0 = (self . 0 & ! (0x3fff << 16usize)) | (((val as u32) & 0x3fff) << 16usize) ; } } impl Default for Eppara4 { # [inline (always)]
fn default () -> Eppara4 { Eppara4 (0) } } # [doc = "HSI trimming values."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct HsiTrimming (pub u32) ; impl HsiTrimming { # [doc = "HSI trimming value."]
# [inline (always)]
pub const fn hsi_trim (& self) -> u16 { let val = (self . 0 >> 0usize) & 0x1fff ; val as u16 } # [doc = "HSI trimming value."]
# [inline (always)]
pub fn set_hsi_trim (& mut self , val : u16) { self . 0 = (self . 0 & ! (0x1fff << 0usize)) | (((val as u32) & 0x1fff) << 0usize) ; } # [doc = "HSI frequency selection."]
# [inline (always)]
pub const fn hsi_fs (& self) -> u8 { let val = (self . 0 >> 13usize) & 0x07 ; val as u8 } # [doc = "HSI frequency selection."]
# [inline (always)]
pub fn set_hsi_fs (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 13usize)) | (((val as u32) & 0x07) << 13usize) ; } } impl Default for HsiTrimming { # [inline (always)]
fn default () -> HsiTrimming { HsiTrimming (0) } } }