#![allow(clippy::missing_safety_doc)]
                #![allow(clippy::identity_op)]
                #![allow(clippy::unnecessary_cast)]
                #![allow(clippy::erasing_op)]

# [doc = "General-purpose I/Os."]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Gpio { ptr : * mut u8 } unsafe impl Send for Gpio { } unsafe impl Sync for Gpio { } impl Gpio { # [inline (always)]
pub const unsafe fn from_ptr (ptr : * mut ()) -> Self { Self { ptr : ptr as _ , } } # [inline (always)]
pub const fn as_ptr (& self) -> * mut () { self . ptr as _ } # [doc = "GPIO port mode register."]
# [inline (always)]
pub const fn moder (self) -> crate :: common :: Reg < regs :: Moder , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x0usize) as _) } } # [doc = "GPIO port output type register."]
# [inline (always)]
pub const fn otyper (self) -> crate :: common :: Reg < regs :: Otyper , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x04usize) as _) } } # [doc = "GPIO port output speed register."]
# [inline (always)]
pub const fn ospeedr (self) -> crate :: common :: Reg < regs :: Ospeedr , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x08usize) as _) } } # [doc = "GPIO port pull-up/pull-down register."]
# [inline (always)]
pub const fn pupdr (self) -> crate :: common :: Reg < regs :: Pupdr , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x0cusize) as _) } } # [doc = "GPIO port input data register."]
# [inline (always)]
pub const fn idr (self) -> crate :: common :: Reg < regs :: Idr , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x10usize) as _) } } # [doc = "GPIO port output data register."]
# [inline (always)]
pub const fn odr (self) -> crate :: common :: Reg < regs :: Odr , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x14usize) as _) } } # [doc = "GPIO port bit set/reset register."]
# [inline (always)]
pub const fn bsrr (self) -> crate :: common :: Reg < regs :: Bsrr , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x18usize) as _) } } # [doc = "GPIO port configuration lock register."]
# [inline (always)]
pub const fn lckr (self) -> crate :: common :: Reg < regs :: Lckr , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x1cusize) as _) } } # [doc = "GPIO alternate function low register."]
# [inline (always)]
pub const fn afrl (self) -> crate :: common :: Reg < regs :: Afrl , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x20usize) as _) } } # [doc = "GPIO alternate function high register."]
# [inline (always)]
pub const fn afrh (self) -> crate :: common :: Reg < regs :: Afrh , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x24usize) as _) } } # [doc = "port bit reset register."]
# [inline (always)]
pub const fn brr (self) -> crate :: common :: Reg < regs :: Brr , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x28usize) as _) } } } pub mod regs { # [doc = "GPIO alternate function high register."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Afrh (pub u32) ; impl Afrh { # [doc = "Alternate function selection for port x I/O pin 8."]
# [inline (always)]
pub const fn afsel8 (& self) -> u8 { let val = (self . 0 >> 0usize) & 0x07 ; val as u8 } # [doc = "Alternate function selection for port x I/O pin 8."]
# [inline (always)]
pub fn set_afsel8 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 0usize)) | (((val as u32) & 0x07) << 0usize) ; } # [doc = "Alternate function selection for port x I/O pin 9."]
# [inline (always)]
pub const fn afsel9 (& self) -> u8 { let val = (self . 0 >> 4usize) & 0x07 ; val as u8 } # [doc = "Alternate function selection for port x I/O pin 9."]
# [inline (always)]
pub fn set_afsel9 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 4usize)) | (((val as u32) & 0x07) << 4usize) ; } # [doc = "Alternate function selection for port x I/O pin 10."]
# [inline (always)]
pub const fn afsel10 (& self) -> u8 { let val = (self . 0 >> 8usize) & 0x07 ; val as u8 } # [doc = "Alternate function selection for port x I/O pin 10."]
# [inline (always)]
pub fn set_afsel10 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 8usize)) | (((val as u32) & 0x07) << 8usize) ; } # [doc = "Alternate function selection for port x I/O pin 11."]
# [inline (always)]
pub const fn afsel11 (& self) -> u8 { let val = (self . 0 >> 12usize) & 0x07 ; val as u8 } # [doc = "Alternate function selection for port x I/O pin 11."]
# [inline (always)]
pub fn set_afsel11 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 12usize)) | (((val as u32) & 0x07) << 12usize) ; } # [doc = "Alternate function selection for port x I/O pin 12."]
# [inline (always)]
pub const fn afsel12 (& self) -> u8 { let val = (self . 0 >> 16usize) & 0x07 ; val as u8 } # [doc = "Alternate function selection for port x I/O pin 12."]
# [inline (always)]
pub fn set_afsel12 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 16usize)) | (((val as u32) & 0x07) << 16usize) ; } # [doc = "Alternate function selection for port x I/O pin 13."]
# [inline (always)]
pub const fn afsel13 (& self) -> u8 { let val = (self . 0 >> 20usize) & 0x07 ; val as u8 } # [doc = "Alternate function selection for port x I/O pin 13."]
# [inline (always)]
pub fn set_afsel13 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 20usize)) | (((val as u32) & 0x07) << 20usize) ; } # [doc = "Alternate function selection for port x I/O pin 14."]
# [inline (always)]
pub const fn afsel14 (& self) -> u8 { let val = (self . 0 >> 24usize) & 0x07 ; val as u8 } # [doc = "Alternate function selection for port x I/O pin 14."]
# [inline (always)]
pub fn set_afsel14 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 24usize)) | (((val as u32) & 0x07) << 24usize) ; } # [doc = "Alternate function selection for port x I/O pin 15."]
# [inline (always)]
pub const fn afsel15 (& self) -> u8 { let val = (self . 0 >> 28usize) & 0x07 ; val as u8 } # [doc = "Alternate function selection for port x I/O pin 15."]
# [inline (always)]
pub fn set_afsel15 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 28usize)) | (((val as u32) & 0x07) << 28usize) ; } } impl Default for Afrh { # [inline (always)]
fn default () -> Afrh { Afrh (0) } } # [doc = "GPIO alternate function low register."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Afrl (pub u32) ; impl Afrl { # [doc = "Alternate function selection for port x I/O pin 0."]
# [inline (always)]
pub const fn afsel0 (& self) -> u8 { let val = (self . 0 >> 0usize) & 0x07 ; val as u8 } # [doc = "Alternate function selection for port x I/O pin 0."]
# [inline (always)]
pub fn set_afsel0 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 0usize)) | (((val as u32) & 0x07) << 0usize) ; } # [doc = "Alternate function selection for port x I/O pin 1."]
# [inline (always)]
pub const fn afsel1 (& self) -> u8 { let val = (self . 0 >> 4usize) & 0x07 ; val as u8 } # [doc = "Alternate function selection for port x I/O pin 1."]
# [inline (always)]
pub fn set_afsel1 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 4usize)) | (((val as u32) & 0x07) << 4usize) ; } # [doc = "Alternate function selection for port x I/O pin 2."]
# [inline (always)]
pub const fn afsel2 (& self) -> u8 { let val = (self . 0 >> 8usize) & 0x07 ; val as u8 } # [doc = "Alternate function selection for port x I/O pin 2."]
# [inline (always)]
pub fn set_afsel2 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 8usize)) | (((val as u32) & 0x07) << 8usize) ; } # [doc = "Alternate function selection for port x I/O pin 4."]
# [inline (always)]
pub const fn afsel3 (& self) -> u8 { let val = (self . 0 >> 12usize) & 0x07 ; val as u8 } # [doc = "Alternate function selection for port x I/O pin 4."]
# [inline (always)]
pub fn set_afsel3 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 12usize)) | (((val as u32) & 0x07) << 12usize) ; } # [doc = "Alternate function selection for port x I/O pin 4."]
# [inline (always)]
pub const fn afsel4 (& self) -> u8 { let val = (self . 0 >> 16usize) & 0x07 ; val as u8 } # [doc = "Alternate function selection for port x I/O pin 4."]
# [inline (always)]
pub fn set_afsel4 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 16usize)) | (((val as u32) & 0x07) << 16usize) ; } # [doc = "Alternate function selection for port x I/O pin 5."]
# [inline (always)]
pub const fn afsel5 (& self) -> u8 { let val = (self . 0 >> 20usize) & 0x07 ; val as u8 } # [doc = "Alternate function selection for port x I/O pin 5."]
# [inline (always)]
pub fn set_afsel5 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 20usize)) | (((val as u32) & 0x07) << 20usize) ; } # [doc = "Alternate function selection for port x I/O pin 6."]
# [inline (always)]
pub const fn afsel6 (& self) -> u8 { let val = (self . 0 >> 24usize) & 0x07 ; val as u8 } # [doc = "Alternate function selection for port x I/O pin 6."]
# [inline (always)]
pub fn set_afsel6 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 24usize)) | (((val as u32) & 0x07) << 24usize) ; } # [doc = "Alternate function selection for port x I/O pin 7."]
# [inline (always)]
pub const fn afsel7 (& self) -> u8 { let val = (self . 0 >> 28usize) & 0x07 ; val as u8 } # [doc = "Alternate function selection for port x I/O pin 7."]
# [inline (always)]
pub fn set_afsel7 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 28usize)) | (((val as u32) & 0x07) << 28usize) ; } } impl Default for Afrl { # [inline (always)]
fn default () -> Afrl { Afrl (0) } } # [doc = "port bit reset register."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Brr (pub u32) ; impl Brr { # [doc = "Port x reset IO pin 0."]
# [inline (always)]
pub const fn br0 (& self) -> bool { let val = (self . 0 >> 0usize) & 0x01 ; val != 0 } # [doc = "Port x reset IO pin 0."]
# [inline (always)]
pub fn set_br0 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 0usize)) | (((val as u32) & 0x01) << 0usize) ; } # [doc = "Port x reset IO pin 1."]
# [inline (always)]
pub const fn br1 (& self) -> bool { let val = (self . 0 >> 1usize) & 0x01 ; val != 0 } # [doc = "Port x reset IO pin 1."]
# [inline (always)]
pub fn set_br1 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 1usize)) | (((val as u32) & 0x01) << 1usize) ; } # [doc = "Port x reset IO pin 2."]
# [inline (always)]
pub const fn br2 (& self) -> bool { let val = (self . 0 >> 2usize) & 0x01 ; val != 0 } # [doc = "Port x reset IO pin 2."]
# [inline (always)]
pub fn set_br2 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 2usize)) | (((val as u32) & 0x01) << 2usize) ; } # [doc = "Port x reset IO pin 3."]
# [inline (always)]
pub const fn br3 (& self) -> bool { let val = (self . 0 >> 3usize) & 0x01 ; val != 0 } # [doc = "Port x reset IO pin 3."]
# [inline (always)]
pub fn set_br3 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 3usize)) | (((val as u32) & 0x01) << 3usize) ; } # [doc = "Port x reset IO pin 4."]
# [inline (always)]
pub const fn br4 (& self) -> bool { let val = (self . 0 >> 4usize) & 0x01 ; val != 0 } # [doc = "Port x reset IO pin 4."]
# [inline (always)]
pub fn set_br4 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 4usize)) | (((val as u32) & 0x01) << 4usize) ; } # [doc = "Port x reset IO pin 5."]
# [inline (always)]
pub const fn br5 (& self) -> bool { let val = (self . 0 >> 5usize) & 0x01 ; val != 0 } # [doc = "Port x reset IO pin 5."]
# [inline (always)]
pub fn set_br5 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 5usize)) | (((val as u32) & 0x01) << 5usize) ; } # [doc = "Port x reset IO pin 6."]
# [inline (always)]
pub const fn br6 (& self) -> bool { let val = (self . 0 >> 6usize) & 0x01 ; val != 0 } # [doc = "Port x reset IO pin 6."]
# [inline (always)]
pub fn set_br6 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 6usize)) | (((val as u32) & 0x01) << 6usize) ; } # [doc = "Port x reset IO pin 7."]
# [inline (always)]
pub const fn br7 (& self) -> bool { let val = (self . 0 >> 7usize) & 0x01 ; val != 0 } # [doc = "Port x reset IO pin 7."]
# [inline (always)]
pub fn set_br7 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 7usize)) | (((val as u32) & 0x01) << 7usize) ; } # [doc = "Port x reset IO pin 8."]
# [inline (always)]
pub const fn br8 (& self) -> bool { let val = (self . 0 >> 8usize) & 0x01 ; val != 0 } # [doc = "Port x reset IO pin 8."]
# [inline (always)]
pub fn set_br8 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 8usize)) | (((val as u32) & 0x01) << 8usize) ; } # [doc = "Port x reset IO pin 9."]
# [inline (always)]
pub const fn br9 (& self) -> bool { let val = (self . 0 >> 9usize) & 0x01 ; val != 0 } # [doc = "Port x reset IO pin 9."]
# [inline (always)]
pub fn set_br9 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 9usize)) | (((val as u32) & 0x01) << 9usize) ; } # [doc = "Port x reset IO pin 10."]
# [inline (always)]
pub const fn br10 (& self) -> bool { let val = (self . 0 >> 10usize) & 0x01 ; val != 0 } # [doc = "Port x reset IO pin 10."]
# [inline (always)]
pub fn set_br10 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 10usize)) | (((val as u32) & 0x01) << 10usize) ; } # [doc = "Port x reset IO pin 11."]
# [inline (always)]
pub const fn br11 (& self) -> bool { let val = (self . 0 >> 11usize) & 0x01 ; val != 0 } # [doc = "Port x reset IO pin 11."]
# [inline (always)]
pub fn set_br11 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 11usize)) | (((val as u32) & 0x01) << 11usize) ; } # [doc = "Port x reset IO pin 12."]
# [inline (always)]
pub const fn br12 (& self) -> bool { let val = (self . 0 >> 12usize) & 0x01 ; val != 0 } # [doc = "Port x reset IO pin 12."]
# [inline (always)]
pub fn set_br12 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 12usize)) | (((val as u32) & 0x01) << 12usize) ; } # [doc = "Port x reset IO pin 13."]
# [inline (always)]
pub const fn br13 (& self) -> bool { let val = (self . 0 >> 13usize) & 0x01 ; val != 0 } # [doc = "Port x reset IO pin 13."]
# [inline (always)]
pub fn set_br13 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 13usize)) | (((val as u32) & 0x01) << 13usize) ; } # [doc = "Port x reset IO pin 14."]
# [inline (always)]
pub const fn br14 (& self) -> bool { let val = (self . 0 >> 14usize) & 0x01 ; val != 0 } # [doc = "Port x reset IO pin 14."]
# [inline (always)]
pub fn set_br14 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 14usize)) | (((val as u32) & 0x01) << 14usize) ; } # [doc = "Port x reset IO pin 15."]
# [inline (always)]
pub const fn br15 (& self) -> bool { let val = (self . 0 >> 15usize) & 0x01 ; val != 0 } # [doc = "Port x reset IO pin 15."]
# [inline (always)]
pub fn set_br15 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 15usize)) | (((val as u32) & 0x01) << 15usize) ; } } impl Default for Brr { # [inline (always)]
fn default () -> Brr { Brr (0) } } # [doc = "GPIO port bit set/reset register."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Bsrr (pub u32) ; impl Bsrr { # [doc = "Port x set I/O pin 0."]
# [inline (always)]
pub const fn bs0 (& self) -> bool { let val = (self . 0 >> 0usize) & 0x01 ; val != 0 } # [doc = "Port x set I/O pin 0."]
# [inline (always)]
pub fn set_bs0 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 0usize)) | (((val as u32) & 0x01) << 0usize) ; } # [doc = "Port x set I/O pin 1."]
# [inline (always)]
pub const fn bs1 (& self) -> bool { let val = (self . 0 >> 1usize) & 0x01 ; val != 0 } # [doc = "Port x set I/O pin 1."]
# [inline (always)]
pub fn set_bs1 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 1usize)) | (((val as u32) & 0x01) << 1usize) ; } # [doc = "Port x set I/O pin 2."]
# [inline (always)]
pub const fn bs2 (& self) -> bool { let val = (self . 0 >> 2usize) & 0x01 ; val != 0 } # [doc = "Port x set I/O pin 2."]
# [inline (always)]
pub fn set_bs2 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 2usize)) | (((val as u32) & 0x01) << 2usize) ; } # [doc = "Port x set I/O pin 3."]
# [inline (always)]
pub const fn bs3 (& self) -> bool { let val = (self . 0 >> 3usize) & 0x01 ; val != 0 } # [doc = "Port x set I/O pin 3."]
# [inline (always)]
pub fn set_bs3 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 3usize)) | (((val as u32) & 0x01) << 3usize) ; } # [doc = "Port x set I/O pin 4."]
# [inline (always)]
pub const fn bs4 (& self) -> bool { let val = (self . 0 >> 4usize) & 0x01 ; val != 0 } # [doc = "Port x set I/O pin 4."]
# [inline (always)]
pub fn set_bs4 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 4usize)) | (((val as u32) & 0x01) << 4usize) ; } # [doc = "Port x set I/O pin 5."]
# [inline (always)]
pub const fn bs5 (& self) -> bool { let val = (self . 0 >> 5usize) & 0x01 ; val != 0 } # [doc = "Port x set I/O pin 5."]
# [inline (always)]
pub fn set_bs5 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 5usize)) | (((val as u32) & 0x01) << 5usize) ; } # [doc = "Port x set I/O pin 6."]
# [inline (always)]
pub const fn bs6 (& self) -> bool { let val = (self . 0 >> 6usize) & 0x01 ; val != 0 } # [doc = "Port x set I/O pin 6."]
# [inline (always)]
pub fn set_bs6 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 6usize)) | (((val as u32) & 0x01) << 6usize) ; } # [doc = "Port x set I/O pin 7."]
# [inline (always)]
pub const fn bs7 (& self) -> bool { let val = (self . 0 >> 7usize) & 0x01 ; val != 0 } # [doc = "Port x set I/O pin 7."]
# [inline (always)]
pub fn set_bs7 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 7usize)) | (((val as u32) & 0x01) << 7usize) ; } # [doc = "Port x set I/O pin 8."]
# [inline (always)]
pub const fn bs8 (& self) -> bool { let val = (self . 0 >> 8usize) & 0x01 ; val != 0 } # [doc = "Port x set I/O pin 8."]
# [inline (always)]
pub fn set_bs8 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 8usize)) | (((val as u32) & 0x01) << 8usize) ; } # [doc = "Port x set I/O pin 9."]
# [inline (always)]
pub const fn bs9 (& self) -> bool { let val = (self . 0 >> 9usize) & 0x01 ; val != 0 } # [doc = "Port x set I/O pin 9."]
# [inline (always)]
pub fn set_bs9 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 9usize)) | (((val as u32) & 0x01) << 9usize) ; } # [doc = "Port x set I/O pin 10."]
# [inline (always)]
pub const fn bs10 (& self) -> bool { let val = (self . 0 >> 10usize) & 0x01 ; val != 0 } # [doc = "Port x set I/O pin 10."]
# [inline (always)]
pub fn set_bs10 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 10usize)) | (((val as u32) & 0x01) << 10usize) ; } # [doc = "Port x set I/O pin 11."]
# [inline (always)]
pub const fn bs11 (& self) -> bool { let val = (self . 0 >> 11usize) & 0x01 ; val != 0 } # [doc = "Port x set I/O pin 11."]
# [inline (always)]
pub fn set_bs11 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 11usize)) | (((val as u32) & 0x01) << 11usize) ; } # [doc = "Port x set I/O pin 12."]
# [inline (always)]
pub const fn bs12 (& self) -> bool { let val = (self . 0 >> 12usize) & 0x01 ; val != 0 } # [doc = "Port x set I/O pin 12."]
# [inline (always)]
pub fn set_bs12 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 12usize)) | (((val as u32) & 0x01) << 12usize) ; } # [doc = "Port x set I/O pin 13."]
# [inline (always)]
pub const fn bs13 (& self) -> bool { let val = (self . 0 >> 13usize) & 0x01 ; val != 0 } # [doc = "Port x set I/O pin 13."]
# [inline (always)]
pub fn set_bs13 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 13usize)) | (((val as u32) & 0x01) << 13usize) ; } # [doc = "Port x set I/O pin 14."]
# [inline (always)]
pub const fn bs14 (& self) -> bool { let val = (self . 0 >> 14usize) & 0x01 ; val != 0 } # [doc = "Port x set I/O pin 14."]
# [inline (always)]
pub fn set_bs14 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 14usize)) | (((val as u32) & 0x01) << 14usize) ; } # [doc = "Port x set I/O pin 15."]
# [inline (always)]
pub const fn bs15 (& self) -> bool { let val = (self . 0 >> 15usize) & 0x01 ; val != 0 } # [doc = "Port x set I/O pin 15."]
# [inline (always)]
pub fn set_bs15 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 15usize)) | (((val as u32) & 0x01) << 15usize) ; } # [doc = "Port x reset I/O pin 0."]
# [inline (always)]
pub const fn br0 (& self) -> bool { let val = (self . 0 >> 16usize) & 0x01 ; val != 0 } # [doc = "Port x reset I/O pin 0."]
# [inline (always)]
pub fn set_br0 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 16usize)) | (((val as u32) & 0x01) << 16usize) ; } # [doc = "Port x reset I/O pin 1."]
# [inline (always)]
pub const fn br1 (& self) -> bool { let val = (self . 0 >> 17usize) & 0x01 ; val != 0 } # [doc = "Port x reset I/O pin 1."]
# [inline (always)]
pub fn set_br1 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 17usize)) | (((val as u32) & 0x01) << 17usize) ; } # [doc = "Port x reset I/O pin 2."]
# [inline (always)]
pub const fn br2 (& self) -> bool { let val = (self . 0 >> 18usize) & 0x01 ; val != 0 } # [doc = "Port x reset I/O pin 2."]
# [inline (always)]
pub fn set_br2 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 18usize)) | (((val as u32) & 0x01) << 18usize) ; } # [doc = "Port x reset I/O pin 3."]
# [inline (always)]
pub const fn br3 (& self) -> bool { let val = (self . 0 >> 19usize) & 0x01 ; val != 0 } # [doc = "Port x reset I/O pin 3."]
# [inline (always)]
pub fn set_br3 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 19usize)) | (((val as u32) & 0x01) << 19usize) ; } # [doc = "Port x reset I/O pin 4."]
# [inline (always)]
pub const fn br4 (& self) -> bool { let val = (self . 0 >> 20usize) & 0x01 ; val != 0 } # [doc = "Port x reset I/O pin 4."]
# [inline (always)]
pub fn set_br4 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 20usize)) | (((val as u32) & 0x01) << 20usize) ; } # [doc = "Port x reset I/O pin 5."]
# [inline (always)]
pub const fn br5 (& self) -> bool { let val = (self . 0 >> 21usize) & 0x01 ; val != 0 } # [doc = "Port x reset I/O pin 5."]
# [inline (always)]
pub fn set_br5 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 21usize)) | (((val as u32) & 0x01) << 21usize) ; } # [doc = "Port x reset I/O pin 6."]
# [inline (always)]
pub const fn br6 (& self) -> bool { let val = (self . 0 >> 22usize) & 0x01 ; val != 0 } # [doc = "Port x reset I/O pin 6."]
# [inline (always)]
pub fn set_br6 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 22usize)) | (((val as u32) & 0x01) << 22usize) ; } # [doc = "Port x reset I/O pin 7."]
# [inline (always)]
pub const fn br7 (& self) -> bool { let val = (self . 0 >> 23usize) & 0x01 ; val != 0 } # [doc = "Port x reset I/O pin 7."]
# [inline (always)]
pub fn set_br7 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 23usize)) | (((val as u32) & 0x01) << 23usize) ; } # [doc = "Port x reset I/O pin 8."]
# [inline (always)]
pub const fn br8 (& self) -> bool { let val = (self . 0 >> 24usize) & 0x01 ; val != 0 } # [doc = "Port x reset I/O pin 8."]
# [inline (always)]
pub fn set_br8 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 24usize)) | (((val as u32) & 0x01) << 24usize) ; } # [doc = "Port x reset I/O pin 9."]
# [inline (always)]
pub const fn br9 (& self) -> bool { let val = (self . 0 >> 25usize) & 0x01 ; val != 0 } # [doc = "Port x reset I/O pin 9."]
# [inline (always)]
pub fn set_br9 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 25usize)) | (((val as u32) & 0x01) << 25usize) ; } # [doc = "Port x reset I/O pin 10."]
# [inline (always)]
pub const fn br10 (& self) -> bool { let val = (self . 0 >> 26usize) & 0x01 ; val != 0 } # [doc = "Port x reset I/O pin 10."]
# [inline (always)]
pub fn set_br10 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 26usize)) | (((val as u32) & 0x01) << 26usize) ; } # [doc = "Port x reset I/O pin 11."]
# [inline (always)]
pub const fn br11 (& self) -> bool { let val = (self . 0 >> 27usize) & 0x01 ; val != 0 } # [doc = "Port x reset I/O pin 11."]
# [inline (always)]
pub fn set_br11 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 27usize)) | (((val as u32) & 0x01) << 27usize) ; } # [doc = "Port x reset I/O pin 12."]
# [inline (always)]
pub const fn br12 (& self) -> bool { let val = (self . 0 >> 28usize) & 0x01 ; val != 0 } # [doc = "Port x reset I/O pin 12."]
# [inline (always)]
pub fn set_br12 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 28usize)) | (((val as u32) & 0x01) << 28usize) ; } # [doc = "Port x reset I/O pin 13."]
# [inline (always)]
pub const fn br13 (& self) -> bool { let val = (self . 0 >> 29usize) & 0x01 ; val != 0 } # [doc = "Port x reset I/O pin 13."]
# [inline (always)]
pub fn set_br13 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 29usize)) | (((val as u32) & 0x01) << 29usize) ; } # [doc = "Port x reset I/O pin 14."]
# [inline (always)]
pub const fn br14 (& self) -> bool { let val = (self . 0 >> 30usize) & 0x01 ; val != 0 } # [doc = "Port x reset I/O pin 14."]
# [inline (always)]
pub fn set_br14 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 30usize)) | (((val as u32) & 0x01) << 30usize) ; } # [doc = "Port x reset I/O pin 15."]
# [inline (always)]
pub const fn br15 (& self) -> bool { let val = (self . 0 >> 31usize) & 0x01 ; val != 0 } # [doc = "Port x reset I/O pin 15."]
# [inline (always)]
pub fn set_br15 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 31usize)) | (((val as u32) & 0x01) << 31usize) ; } } impl Default for Bsrr { # [inline (always)]
fn default () -> Bsrr { Bsrr (0) } } # [doc = "GPIO port input data register."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Idr (pub u32) ; impl Idr { # [doc = "Port x input data I/O pin 0."]
# [inline (always)]
pub const fn id0 (& self) -> bool { let val = (self . 0 >> 0usize) & 0x01 ; val != 0 } # [doc = "Port x input data I/O pin 0."]
# [inline (always)]
pub fn set_id0 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 0usize)) | (((val as u32) & 0x01) << 0usize) ; } # [doc = "Port x input data I/O pin 1."]
# [inline (always)]
pub const fn id1 (& self) -> bool { let val = (self . 0 >> 1usize) & 0x01 ; val != 0 } # [doc = "Port x input data I/O pin 1."]
# [inline (always)]
pub fn set_id1 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 1usize)) | (((val as u32) & 0x01) << 1usize) ; } # [doc = "Port x input data I/O pin 2."]
# [inline (always)]
pub const fn id2 (& self) -> bool { let val = (self . 0 >> 2usize) & 0x01 ; val != 0 } # [doc = "Port x input data I/O pin 2."]
# [inline (always)]
pub fn set_id2 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 2usize)) | (((val as u32) & 0x01) << 2usize) ; } # [doc = "Port x input data I/O pin 3."]
# [inline (always)]
pub const fn id3 (& self) -> bool { let val = (self . 0 >> 3usize) & 0x01 ; val != 0 } # [doc = "Port x input data I/O pin 3."]
# [inline (always)]
pub fn set_id3 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 3usize)) | (((val as u32) & 0x01) << 3usize) ; } # [doc = "Port x input data I/O pin 4."]
# [inline (always)]
pub const fn id4 (& self) -> bool { let val = (self . 0 >> 4usize) & 0x01 ; val != 0 } # [doc = "Port x input data I/O pin 4."]
# [inline (always)]
pub fn set_id4 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 4usize)) | (((val as u32) & 0x01) << 4usize) ; } # [doc = "Port x input data I/O pin 5."]
# [inline (always)]
pub const fn id5 (& self) -> bool { let val = (self . 0 >> 5usize) & 0x01 ; val != 0 } # [doc = "Port x input data I/O pin 5."]
# [inline (always)]
pub fn set_id5 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 5usize)) | (((val as u32) & 0x01) << 5usize) ; } # [doc = "Port x input data I/O pin 6."]
# [inline (always)]
pub const fn id6 (& self) -> bool { let val = (self . 0 >> 6usize) & 0x01 ; val != 0 } # [doc = "Port x input data I/O pin 6."]
# [inline (always)]
pub fn set_id6 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 6usize)) | (((val as u32) & 0x01) << 6usize) ; } # [doc = "Port x input data I/O pin 7."]
# [inline (always)]
pub const fn id7 (& self) -> bool { let val = (self . 0 >> 7usize) & 0x01 ; val != 0 } # [doc = "Port x input data I/O pin 7."]
# [inline (always)]
pub fn set_id7 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 7usize)) | (((val as u32) & 0x01) << 7usize) ; } # [doc = "Port x input data I/O pin 8."]
# [inline (always)]
pub const fn id8 (& self) -> bool { let val = (self . 0 >> 8usize) & 0x01 ; val != 0 } # [doc = "Port x input data I/O pin 8."]
# [inline (always)]
pub fn set_id8 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 8usize)) | (((val as u32) & 0x01) << 8usize) ; } # [doc = "Port x input data I/O pin 9."]
# [inline (always)]
pub const fn id9 (& self) -> bool { let val = (self . 0 >> 9usize) & 0x01 ; val != 0 } # [doc = "Port x input data I/O pin 9."]
# [inline (always)]
pub fn set_id9 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 9usize)) | (((val as u32) & 0x01) << 9usize) ; } # [doc = "Port x input data I/O pin 10."]
# [inline (always)]
pub const fn id10 (& self) -> bool { let val = (self . 0 >> 10usize) & 0x01 ; val != 0 } # [doc = "Port x input data I/O pin 10."]
# [inline (always)]
pub fn set_id10 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 10usize)) | (((val as u32) & 0x01) << 10usize) ; } # [doc = "Port x input data I/O pin 11."]
# [inline (always)]
pub const fn id11 (& self) -> bool { let val = (self . 0 >> 11usize) & 0x01 ; val != 0 } # [doc = "Port x input data I/O pin 11."]
# [inline (always)]
pub fn set_id11 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 11usize)) | (((val as u32) & 0x01) << 11usize) ; } # [doc = "Port x input data I/O pin 12."]
# [inline (always)]
pub const fn id12 (& self) -> bool { let val = (self . 0 >> 12usize) & 0x01 ; val != 0 } # [doc = "Port x input data I/O pin 12."]
# [inline (always)]
pub fn set_id12 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 12usize)) | (((val as u32) & 0x01) << 12usize) ; } # [doc = "Port x input data I/O pin 13."]
# [inline (always)]
pub const fn id13 (& self) -> bool { let val = (self . 0 >> 13usize) & 0x01 ; val != 0 } # [doc = "Port x input data I/O pin 13."]
# [inline (always)]
pub fn set_id13 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 13usize)) | (((val as u32) & 0x01) << 13usize) ; } # [doc = "Port x input data I/O pin 14."]
# [inline (always)]
pub const fn id14 (& self) -> bool { let val = (self . 0 >> 14usize) & 0x01 ; val != 0 } # [doc = "Port x input data I/O pin 14."]
# [inline (always)]
pub fn set_id14 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 14usize)) | (((val as u32) & 0x01) << 14usize) ; } # [doc = "Port x input data I/O pin 15."]
# [inline (always)]
pub const fn id15 (& self) -> bool { let val = (self . 0 >> 15usize) & 0x01 ; val != 0 } # [doc = "Port x input data I/O pin 15."]
# [inline (always)]
pub fn set_id15 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 15usize)) | (((val as u32) & 0x01) << 15usize) ; } } impl Default for Idr { # [inline (always)]
fn default () -> Idr { Idr (0) } } # [doc = "GPIO port configuration lock register."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Lckr (pub u32) ; impl Lckr { # [doc = "Port x lock I/O pin 0."]
# [inline (always)]
pub const fn lck0 (& self) -> bool { let val = (self . 0 >> 0usize) & 0x01 ; val != 0 } # [doc = "Port x lock I/O pin 0."]
# [inline (always)]
pub fn set_lck0 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 0usize)) | (((val as u32) & 0x01) << 0usize) ; } # [doc = "Port x lock I/O pin 1."]
# [inline (always)]
pub const fn lck1 (& self) -> bool { let val = (self . 0 >> 1usize) & 0x01 ; val != 0 } # [doc = "Port x lock I/O pin 1."]
# [inline (always)]
pub fn set_lck1 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 1usize)) | (((val as u32) & 0x01) << 1usize) ; } # [doc = "Port x lock I/O pin 2."]
# [inline (always)]
pub const fn lck2 (& self) -> bool { let val = (self . 0 >> 2usize) & 0x01 ; val != 0 } # [doc = "Port x lock I/O pin 2."]
# [inline (always)]
pub fn set_lck2 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 2usize)) | (((val as u32) & 0x01) << 2usize) ; } # [doc = "Port x lock I/O pin 3."]
# [inline (always)]
pub const fn lck3 (& self) -> bool { let val = (self . 0 >> 3usize) & 0x01 ; val != 0 } # [doc = "Port x lock I/O pin 3."]
# [inline (always)]
pub fn set_lck3 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 3usize)) | (((val as u32) & 0x01) << 3usize) ; } # [doc = "Port x lock I/O pin 4."]
# [inline (always)]
pub const fn lck4 (& self) -> bool { let val = (self . 0 >> 4usize) & 0x01 ; val != 0 } # [doc = "Port x lock I/O pin 4."]
# [inline (always)]
pub fn set_lck4 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 4usize)) | (((val as u32) & 0x01) << 4usize) ; } # [doc = "Port x lock I/O pin 5."]
# [inline (always)]
pub const fn lck5 (& self) -> bool { let val = (self . 0 >> 5usize) & 0x01 ; val != 0 } # [doc = "Port x lock I/O pin 5."]
# [inline (always)]
pub fn set_lck5 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 5usize)) | (((val as u32) & 0x01) << 5usize) ; } # [doc = "Port x lock I/O pin 6."]
# [inline (always)]
pub const fn lck6 (& self) -> bool { let val = (self . 0 >> 6usize) & 0x01 ; val != 0 } # [doc = "Port x lock I/O pin 6."]
# [inline (always)]
pub fn set_lck6 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 6usize)) | (((val as u32) & 0x01) << 6usize) ; } # [doc = "Port x lock I/O pin 7."]
# [inline (always)]
pub const fn lck7 (& self) -> bool { let val = (self . 0 >> 7usize) & 0x01 ; val != 0 } # [doc = "Port x lock I/O pin 7."]
# [inline (always)]
pub fn set_lck7 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 7usize)) | (((val as u32) & 0x01) << 7usize) ; } # [doc = "Port x lock I/O pin 8."]
# [inline (always)]
pub const fn lck8 (& self) -> bool { let val = (self . 0 >> 8usize) & 0x01 ; val != 0 } # [doc = "Port x lock I/O pin 8."]
# [inline (always)]
pub fn set_lck8 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 8usize)) | (((val as u32) & 0x01) << 8usize) ; } # [doc = "Port x lock I/O pin 9."]
# [inline (always)]
pub const fn lck9 (& self) -> bool { let val = (self . 0 >> 9usize) & 0x01 ; val != 0 } # [doc = "Port x lock I/O pin 9."]
# [inline (always)]
pub fn set_lck9 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 9usize)) | (((val as u32) & 0x01) << 9usize) ; } # [doc = "Port x lock I/O pin 10."]
# [inline (always)]
pub const fn lck10 (& self) -> bool { let val = (self . 0 >> 10usize) & 0x01 ; val != 0 } # [doc = "Port x lock I/O pin 10."]
# [inline (always)]
pub fn set_lck10 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 10usize)) | (((val as u32) & 0x01) << 10usize) ; } # [doc = "Port x lock I/O pin 11."]
# [inline (always)]
pub const fn lck11 (& self) -> bool { let val = (self . 0 >> 11usize) & 0x01 ; val != 0 } # [doc = "Port x lock I/O pin 11."]
# [inline (always)]
pub fn set_lck11 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 11usize)) | (((val as u32) & 0x01) << 11usize) ; } # [doc = "Port x lock I/O pin 12."]
# [inline (always)]
pub const fn lck12 (& self) -> bool { let val = (self . 0 >> 12usize) & 0x01 ; val != 0 } # [doc = "Port x lock I/O pin 12."]
# [inline (always)]
pub fn set_lck12 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 12usize)) | (((val as u32) & 0x01) << 12usize) ; } # [doc = "Port x lock I/O pin 13."]
# [inline (always)]
pub const fn lck13 (& self) -> bool { let val = (self . 0 >> 13usize) & 0x01 ; val != 0 } # [doc = "Port x lock I/O pin 13."]
# [inline (always)]
pub fn set_lck13 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 13usize)) | (((val as u32) & 0x01) << 13usize) ; } # [doc = "Port x lock I/O pin 14."]
# [inline (always)]
pub const fn lck14 (& self) -> bool { let val = (self . 0 >> 14usize) & 0x01 ; val != 0 } # [doc = "Port x lock I/O pin 14."]
# [inline (always)]
pub fn set_lck14 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 14usize)) | (((val as u32) & 0x01) << 14usize) ; } # [doc = "Port x lock I/O pin 15."]
# [inline (always)]
pub const fn lck15 (& self) -> bool { let val = (self . 0 >> 15usize) & 0x01 ; val != 0 } # [doc = "Port x lock I/O pin 15."]
# [inline (always)]
pub fn set_lck15 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 15usize)) | (((val as u32) & 0x01) << 15usize) ; } # [doc = "Lock key."]
# [inline (always)]
pub const fn lckk (& self) -> bool { let val = (self . 0 >> 16usize) & 0x01 ; val != 0 } # [doc = "Lock key."]
# [inline (always)]
pub fn set_lckk (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 16usize)) | (((val as u32) & 0x01) << 16usize) ; } } impl Default for Lckr { # [inline (always)]
fn default () -> Lckr { Lckr (0) } } # [doc = "GPIO port mode register."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Moder (pub u32) ; impl Moder { # [doc = "Port x configuration I/O pin 0."]
# [inline (always)]
pub const fn mode0 (& self) -> u8 { let val = (self . 0 >> 0usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 0."]
# [inline (always)]
pub fn set_mode0 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 0usize)) | (((val as u32) & 0x03) << 0usize) ; } # [doc = "Port x configuration I/O pin 1."]
# [inline (always)]
pub const fn mode1 (& self) -> u8 { let val = (self . 0 >> 2usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 1."]
# [inline (always)]
pub fn set_mode1 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 2usize)) | (((val as u32) & 0x03) << 2usize) ; } # [doc = "Port x configuration I/O pin 2."]
# [inline (always)]
pub const fn mode2 (& self) -> u8 { let val = (self . 0 >> 4usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 2."]
# [inline (always)]
pub fn set_mode2 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 4usize)) | (((val as u32) & 0x03) << 4usize) ; } # [doc = "Port x configuration I/O pin 3."]
# [inline (always)]
pub const fn mode3 (& self) -> u8 { let val = (self . 0 >> 6usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 3."]
# [inline (always)]
pub fn set_mode3 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 6usize)) | (((val as u32) & 0x03) << 6usize) ; } # [doc = "Port x configuration I/O pin 4."]
# [inline (always)]
pub const fn mode4 (& self) -> u8 { let val = (self . 0 >> 8usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 4."]
# [inline (always)]
pub fn set_mode4 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 8usize)) | (((val as u32) & 0x03) << 8usize) ; } # [doc = "Port x configuration I/O pin 5."]
# [inline (always)]
pub const fn mode5 (& self) -> u8 { let val = (self . 0 >> 10usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 5."]
# [inline (always)]
pub fn set_mode5 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 10usize)) | (((val as u32) & 0x03) << 10usize) ; } # [doc = "Port x configuration I/O pin 6."]
# [inline (always)]
pub const fn mode6 (& self) -> u8 { let val = (self . 0 >> 12usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 6."]
# [inline (always)]
pub fn set_mode6 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 12usize)) | (((val as u32) & 0x03) << 12usize) ; } # [doc = "Port x configuration I/O pin 7."]
# [inline (always)]
pub const fn mode7 (& self) -> u8 { let val = (self . 0 >> 14usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 7."]
# [inline (always)]
pub fn set_mode7 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 14usize)) | (((val as u32) & 0x03) << 14usize) ; } # [doc = "Port x configuration I/O pin 8."]
# [inline (always)]
pub const fn mode8 (& self) -> u8 { let val = (self . 0 >> 16usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 8."]
# [inline (always)]
pub fn set_mode8 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 16usize)) | (((val as u32) & 0x03) << 16usize) ; } # [doc = "Port x configuration I/O pin 9."]
# [inline (always)]
pub const fn mode9 (& self) -> u8 { let val = (self . 0 >> 18usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 9."]
# [inline (always)]
pub fn set_mode9 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 18usize)) | (((val as u32) & 0x03) << 18usize) ; } # [doc = "Port x configuration I/O pin 10."]
# [inline (always)]
pub const fn mode10 (& self) -> u8 { let val = (self . 0 >> 20usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 10."]
# [inline (always)]
pub fn set_mode10 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 20usize)) | (((val as u32) & 0x03) << 20usize) ; } # [doc = "Port x configuration I/O pin 11."]
# [inline (always)]
pub const fn mode11 (& self) -> u8 { let val = (self . 0 >> 22usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 11."]
# [inline (always)]
pub fn set_mode11 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 22usize)) | (((val as u32) & 0x03) << 22usize) ; } # [doc = "Port x configuration I/O pin 12."]
# [inline (always)]
pub const fn mode12 (& self) -> u8 { let val = (self . 0 >> 24usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 12."]
# [inline (always)]
pub fn set_mode12 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 24usize)) | (((val as u32) & 0x03) << 24usize) ; } # [doc = "Port x configuration I/O pin 13."]
# [inline (always)]
pub const fn mode13 (& self) -> u8 { let val = (self . 0 >> 26usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 13."]
# [inline (always)]
pub fn set_mode13 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 26usize)) | (((val as u32) & 0x03) << 26usize) ; } # [doc = "Port x configuration I/O pin 14."]
# [inline (always)]
pub const fn mode14 (& self) -> u8 { let val = (self . 0 >> 28usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 14."]
# [inline (always)]
pub fn set_mode14 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 28usize)) | (((val as u32) & 0x03) << 28usize) ; } # [doc = "Port x configuration I/O pin 15."]
# [inline (always)]
pub const fn mode15 (& self) -> u8 { let val = (self . 0 >> 30usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 15."]
# [inline (always)]
pub fn set_mode15 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 30usize)) | (((val as u32) & 0x03) << 30usize) ; } } impl Default for Moder { # [inline (always)]
fn default () -> Moder { Moder (0) } } # [doc = "GPIO port output data register."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Odr (pub u32) ; impl Odr { # [doc = "Port output data I/O pin 0."]
# [inline (always)]
pub const fn od0 (& self) -> bool { let val = (self . 0 >> 0usize) & 0x01 ; val != 0 } # [doc = "Port output data I/O pin 0."]
# [inline (always)]
pub fn set_od0 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 0usize)) | (((val as u32) & 0x01) << 0usize) ; } # [doc = "Port output data I/O pin 1."]
# [inline (always)]
pub const fn od1 (& self) -> bool { let val = (self . 0 >> 1usize) & 0x01 ; val != 0 } # [doc = "Port output data I/O pin 1."]
# [inline (always)]
pub fn set_od1 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 1usize)) | (((val as u32) & 0x01) << 1usize) ; } # [doc = "Port output data I/O pin 2."]
# [inline (always)]
pub const fn od2 (& self) -> bool { let val = (self . 0 >> 2usize) & 0x01 ; val != 0 } # [doc = "Port output data I/O pin 2."]
# [inline (always)]
pub fn set_od2 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 2usize)) | (((val as u32) & 0x01) << 2usize) ; } # [doc = "Port output data I/O pin 3."]
# [inline (always)]
pub const fn od3 (& self) -> bool { let val = (self . 0 >> 3usize) & 0x01 ; val != 0 } # [doc = "Port output data I/O pin 3."]
# [inline (always)]
pub fn set_od3 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 3usize)) | (((val as u32) & 0x01) << 3usize) ; } # [doc = "Port output data I/O pin 4."]
# [inline (always)]
pub const fn od4 (& self) -> bool { let val = (self . 0 >> 4usize) & 0x01 ; val != 0 } # [doc = "Port output data I/O pin 4."]
# [inline (always)]
pub fn set_od4 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 4usize)) | (((val as u32) & 0x01) << 4usize) ; } # [doc = "Port output data I/O pin 5."]
# [inline (always)]
pub const fn od5 (& self) -> bool { let val = (self . 0 >> 5usize) & 0x01 ; val != 0 } # [doc = "Port output data I/O pin 5."]
# [inline (always)]
pub fn set_od5 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 5usize)) | (((val as u32) & 0x01) << 5usize) ; } # [doc = "Port output data I/O pin 6."]
# [inline (always)]
pub const fn od6 (& self) -> bool { let val = (self . 0 >> 6usize) & 0x01 ; val != 0 } # [doc = "Port output data I/O pin 6."]
# [inline (always)]
pub fn set_od6 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 6usize)) | (((val as u32) & 0x01) << 6usize) ; } # [doc = "Port output data I/O pin 7."]
# [inline (always)]
pub const fn od7 (& self) -> bool { let val = (self . 0 >> 7usize) & 0x01 ; val != 0 } # [doc = "Port output data I/O pin 7."]
# [inline (always)]
pub fn set_od7 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 7usize)) | (((val as u32) & 0x01) << 7usize) ; } # [doc = "Port output data I/O pin 8."]
# [inline (always)]
pub const fn od8 (& self) -> bool { let val = (self . 0 >> 8usize) & 0x01 ; val != 0 } # [doc = "Port output data I/O pin 8."]
# [inline (always)]
pub fn set_od8 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 8usize)) | (((val as u32) & 0x01) << 8usize) ; } # [doc = "Port output data I/O pin 9."]
# [inline (always)]
pub const fn od9 (& self) -> bool { let val = (self . 0 >> 9usize) & 0x01 ; val != 0 } # [doc = "Port output data I/O pin 9."]
# [inline (always)]
pub fn set_od9 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 9usize)) | (((val as u32) & 0x01) << 9usize) ; } # [doc = "Port output data I/O pin 10."]
# [inline (always)]
pub const fn od10 (& self) -> bool { let val = (self . 0 >> 10usize) & 0x01 ; val != 0 } # [doc = "Port output data I/O pin 10."]
# [inline (always)]
pub fn set_od10 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 10usize)) | (((val as u32) & 0x01) << 10usize) ; } # [doc = "Port output data I/O pin 11."]
# [inline (always)]
pub const fn od11 (& self) -> bool { let val = (self . 0 >> 11usize) & 0x01 ; val != 0 } # [doc = "Port output data I/O pin 11."]
# [inline (always)]
pub fn set_od11 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 11usize)) | (((val as u32) & 0x01) << 11usize) ; } # [doc = "Port output data I/O pin 12."]
# [inline (always)]
pub const fn od12 (& self) -> bool { let val = (self . 0 >> 12usize) & 0x01 ; val != 0 } # [doc = "Port output data I/O pin 12."]
# [inline (always)]
pub fn set_od12 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 12usize)) | (((val as u32) & 0x01) << 12usize) ; } # [doc = "Port output data I/O pin 13."]
# [inline (always)]
pub const fn od13 (& self) -> bool { let val = (self . 0 >> 13usize) & 0x01 ; val != 0 } # [doc = "Port output data I/O pin 13."]
# [inline (always)]
pub fn set_od13 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 13usize)) | (((val as u32) & 0x01) << 13usize) ; } # [doc = "Port output data I/O pin 14."]
# [inline (always)]
pub const fn od14 (& self) -> bool { let val = (self . 0 >> 14usize) & 0x01 ; val != 0 } # [doc = "Port output data I/O pin 14."]
# [inline (always)]
pub fn set_od14 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 14usize)) | (((val as u32) & 0x01) << 14usize) ; } # [doc = "Port output data I/O pin 15."]
# [inline (always)]
pub const fn od15 (& self) -> bool { let val = (self . 0 >> 15usize) & 0x01 ; val != 0 } # [doc = "Port output data I/O pin 15."]
# [inline (always)]
pub fn set_od15 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 15usize)) | (((val as u32) & 0x01) << 15usize) ; } } impl Default for Odr { # [inline (always)]
fn default () -> Odr { Odr (0) } } # [doc = "GPIO port output speed register."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Ospeedr (pub u32) ; impl Ospeedr { # [doc = "Port x configuration I/O pin 0."]
# [inline (always)]
pub const fn ospeed0 (& self) -> u8 { let val = (self . 0 >> 0usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 0."]
# [inline (always)]
pub fn set_ospeed0 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 0usize)) | (((val as u32) & 0x03) << 0usize) ; } # [doc = "Port x configuration I/O pin 1."]
# [inline (always)]
pub const fn ospeed1 (& self) -> u8 { let val = (self . 0 >> 2usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 1."]
# [inline (always)]
pub fn set_ospeed1 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 2usize)) | (((val as u32) & 0x03) << 2usize) ; } # [doc = "Port x configuration I/O pin 2."]
# [inline (always)]
pub const fn ospeed2 (& self) -> u8 { let val = (self . 0 >> 4usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 2."]
# [inline (always)]
pub fn set_ospeed2 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 4usize)) | (((val as u32) & 0x03) << 4usize) ; } # [doc = "Port x configuration I/O pin 3."]
# [inline (always)]
pub const fn ospeed3 (& self) -> u8 { let val = (self . 0 >> 6usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 3."]
# [inline (always)]
pub fn set_ospeed3 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 6usize)) | (((val as u32) & 0x03) << 6usize) ; } # [doc = "Port x configuration I/O pin 4."]
# [inline (always)]
pub const fn ospeed4 (& self) -> u8 { let val = (self . 0 >> 8usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 4."]
# [inline (always)]
pub fn set_ospeed4 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 8usize)) | (((val as u32) & 0x03) << 8usize) ; } # [doc = "Port x configuration I/O pin 5."]
# [inline (always)]
pub const fn ospeed5 (& self) -> u8 { let val = (self . 0 >> 10usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 5."]
# [inline (always)]
pub fn set_ospeed5 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 10usize)) | (((val as u32) & 0x03) << 10usize) ; } # [doc = "Port x configuration I/O pin 6."]
# [inline (always)]
pub const fn ospeed6 (& self) -> u8 { let val = (self . 0 >> 12usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 6."]
# [inline (always)]
pub fn set_ospeed6 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 12usize)) | (((val as u32) & 0x03) << 12usize) ; } # [doc = "Port x configuration I/O pin 7."]
# [inline (always)]
pub const fn ospeed7 (& self) -> u8 { let val = (self . 0 >> 14usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 7."]
# [inline (always)]
pub fn set_ospeed7 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 14usize)) | (((val as u32) & 0x03) << 14usize) ; } # [doc = "Port x configuration I/O pin 8."]
# [inline (always)]
pub const fn ospeed8 (& self) -> u8 { let val = (self . 0 >> 16usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 8."]
# [inline (always)]
pub fn set_ospeed8 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 16usize)) | (((val as u32) & 0x03) << 16usize) ; } # [doc = "Port x configuration I/O pin 9."]
# [inline (always)]
pub const fn ospeed9 (& self) -> u8 { let val = (self . 0 >> 18usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 9."]
# [inline (always)]
pub fn set_ospeed9 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 18usize)) | (((val as u32) & 0x03) << 18usize) ; } # [doc = "Port x configuration I/O pin 10."]
# [inline (always)]
pub const fn ospeed10 (& self) -> u8 { let val = (self . 0 >> 20usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 10."]
# [inline (always)]
pub fn set_ospeed10 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 20usize)) | (((val as u32) & 0x03) << 20usize) ; } # [doc = "Port x configuration I/O pin 11."]
# [inline (always)]
pub const fn ospeed11 (& self) -> u8 { let val = (self . 0 >> 22usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 11."]
# [inline (always)]
pub fn set_ospeed11 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 22usize)) | (((val as u32) & 0x03) << 22usize) ; } # [doc = "Port x configuration I/O pin 12."]
# [inline (always)]
pub const fn ospeed12 (& self) -> u8 { let val = (self . 0 >> 24usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 12."]
# [inline (always)]
pub fn set_ospeed12 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 24usize)) | (((val as u32) & 0x03) << 24usize) ; } # [doc = "Port x configuration I/O pin 13."]
# [inline (always)]
pub const fn ospeed13 (& self) -> u8 { let val = (self . 0 >> 26usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 13."]
# [inline (always)]
pub fn set_ospeed13 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 26usize)) | (((val as u32) & 0x03) << 26usize) ; } # [doc = "Port x configuration I/O pin 14."]
# [inline (always)]
pub const fn ospeed14 (& self) -> u8 { let val = (self . 0 >> 28usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 14."]
# [inline (always)]
pub fn set_ospeed14 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 28usize)) | (((val as u32) & 0x03) << 28usize) ; } # [doc = "Port x configuration I/O pin 15."]
# [inline (always)]
pub const fn ospeed15 (& self) -> u8 { let val = (self . 0 >> 30usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 15."]
# [inline (always)]
pub fn set_ospeed15 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 30usize)) | (((val as u32) & 0x03) << 30usize) ; } } impl Default for Ospeedr { # [inline (always)]
fn default () -> Ospeedr { Ospeedr (0) } } # [doc = "GPIO port output type register."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Otyper (pub u32) ; impl Otyper { # [doc = "Port x configuration I/O pin 0."]
# [inline (always)]
pub const fn ot0 (& self) -> bool { let val = (self . 0 >> 0usize) & 0x01 ; val != 0 } # [doc = "Port x configuration I/O pin 0."]
# [inline (always)]
pub fn set_ot0 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 0usize)) | (((val as u32) & 0x01) << 0usize) ; } # [doc = "Port x configuration I/O pin 1."]
# [inline (always)]
pub const fn ot1 (& self) -> bool { let val = (self . 0 >> 1usize) & 0x01 ; val != 0 } # [doc = "Port x configuration I/O pin 1."]
# [inline (always)]
pub fn set_ot1 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 1usize)) | (((val as u32) & 0x01) << 1usize) ; } # [doc = "Port x configuration I/O pin 2."]
# [inline (always)]
pub const fn ot2 (& self) -> bool { let val = (self . 0 >> 2usize) & 0x01 ; val != 0 } # [doc = "Port x configuration I/O pin 2."]
# [inline (always)]
pub fn set_ot2 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 2usize)) | (((val as u32) & 0x01) << 2usize) ; } # [doc = "Port x configuration I/O pin 3."]
# [inline (always)]
pub const fn ot3 (& self) -> bool { let val = (self . 0 >> 3usize) & 0x01 ; val != 0 } # [doc = "Port x configuration I/O pin 3."]
# [inline (always)]
pub fn set_ot3 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 3usize)) | (((val as u32) & 0x01) << 3usize) ; } # [doc = "Port x configuration I/O pin 4."]
# [inline (always)]
pub const fn ot4 (& self) -> bool { let val = (self . 0 >> 4usize) & 0x01 ; val != 0 } # [doc = "Port x configuration I/O pin 4."]
# [inline (always)]
pub fn set_ot4 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 4usize)) | (((val as u32) & 0x01) << 4usize) ; } # [doc = "Port x configuration I/O pin 5."]
# [inline (always)]
pub const fn ot5 (& self) -> bool { let val = (self . 0 >> 5usize) & 0x01 ; val != 0 } # [doc = "Port x configuration I/O pin 5."]
# [inline (always)]
pub fn set_ot5 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 5usize)) | (((val as u32) & 0x01) << 5usize) ; } # [doc = "Port x configuration I/O pin 6."]
# [inline (always)]
pub const fn ot6 (& self) -> bool { let val = (self . 0 >> 6usize) & 0x01 ; val != 0 } # [doc = "Port x configuration I/O pin 6."]
# [inline (always)]
pub fn set_ot6 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 6usize)) | (((val as u32) & 0x01) << 6usize) ; } # [doc = "Port x configuration I/O pin 7."]
# [inline (always)]
pub const fn ot7 (& self) -> bool { let val = (self . 0 >> 7usize) & 0x01 ; val != 0 } # [doc = "Port x configuration I/O pin 7."]
# [inline (always)]
pub fn set_ot7 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 7usize)) | (((val as u32) & 0x01) << 7usize) ; } # [doc = "Port x configuration I/O pin 8."]
# [inline (always)]
pub const fn ot8 (& self) -> bool { let val = (self . 0 >> 8usize) & 0x01 ; val != 0 } # [doc = "Port x configuration I/O pin 8."]
# [inline (always)]
pub fn set_ot8 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 8usize)) | (((val as u32) & 0x01) << 8usize) ; } # [doc = "Port x configuration I/O pin 9."]
# [inline (always)]
pub const fn ot9 (& self) -> bool { let val = (self . 0 >> 9usize) & 0x01 ; val != 0 } # [doc = "Port x configuration I/O pin 9."]
# [inline (always)]
pub fn set_ot9 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 9usize)) | (((val as u32) & 0x01) << 9usize) ; } # [doc = "Port x configuration I/O pin 10."]
# [inline (always)]
pub const fn ot10 (& self) -> bool { let val = (self . 0 >> 10usize) & 0x01 ; val != 0 } # [doc = "Port x configuration I/O pin 10."]
# [inline (always)]
pub fn set_ot10 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 10usize)) | (((val as u32) & 0x01) << 10usize) ; } # [doc = "Port x configuration I/O pin 11."]
# [inline (always)]
pub const fn ot11 (& self) -> bool { let val = (self . 0 >> 11usize) & 0x01 ; val != 0 } # [doc = "Port x configuration I/O pin 11."]
# [inline (always)]
pub fn set_ot11 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 11usize)) | (((val as u32) & 0x01) << 11usize) ; } # [doc = "Port x configuration I/O pin 12."]
# [inline (always)]
pub const fn ot12 (& self) -> bool { let val = (self . 0 >> 12usize) & 0x01 ; val != 0 } # [doc = "Port x configuration I/O pin 12."]
# [inline (always)]
pub fn set_ot12 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 12usize)) | (((val as u32) & 0x01) << 12usize) ; } # [doc = "Port x configuration I/O pin 13."]
# [inline (always)]
pub const fn ot13 (& self) -> bool { let val = (self . 0 >> 13usize) & 0x01 ; val != 0 } # [doc = "Port x configuration I/O pin 13."]
# [inline (always)]
pub fn set_ot13 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 13usize)) | (((val as u32) & 0x01) << 13usize) ; } # [doc = "Port x configuration I/O pin 14."]
# [inline (always)]
pub const fn ot14 (& self) -> bool { let val = (self . 0 >> 14usize) & 0x01 ; val != 0 } # [doc = "Port x configuration I/O pin 14."]
# [inline (always)]
pub fn set_ot14 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 14usize)) | (((val as u32) & 0x01) << 14usize) ; } # [doc = "Port x configuration I/O pin 15."]
# [inline (always)]
pub const fn ot15 (& self) -> bool { let val = (self . 0 >> 15usize) & 0x01 ; val != 0 } # [doc = "Port x configuration I/O pin 15."]
# [inline (always)]
pub fn set_ot15 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 15usize)) | (((val as u32) & 0x01) << 15usize) ; } } impl Default for Otyper { # [inline (always)]
fn default () -> Otyper { Otyper (0) } } # [doc = "GPIO port pull-up/pull-down register."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Pupdr (pub u32) ; impl Pupdr { # [doc = "Port x configuration I/O pin 0."]
# [inline (always)]
pub const fn pupd0 (& self) -> u8 { let val = (self . 0 >> 0usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 0."]
# [inline (always)]
pub fn set_pupd0 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 0usize)) | (((val as u32) & 0x03) << 0usize) ; } # [doc = "Port x configuration I/O pin 1."]
# [inline (always)]
pub const fn pupd1 (& self) -> u8 { let val = (self . 0 >> 2usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 1."]
# [inline (always)]
pub fn set_pupd1 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 2usize)) | (((val as u32) & 0x03) << 2usize) ; } # [doc = "Port x configuration I/O pin 2."]
# [inline (always)]
pub const fn pupd2 (& self) -> u8 { let val = (self . 0 >> 4usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 2."]
# [inline (always)]
pub fn set_pupd2 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 4usize)) | (((val as u32) & 0x03) << 4usize) ; } # [doc = "Port x configuration I/O pin 3."]
# [inline (always)]
pub const fn pupd3 (& self) -> u8 { let val = (self . 0 >> 6usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 3."]
# [inline (always)]
pub fn set_pupd3 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 6usize)) | (((val as u32) & 0x03) << 6usize) ; } # [doc = "Port x configuration I/O pin 4."]
# [inline (always)]
pub const fn pupd4 (& self) -> u8 { let val = (self . 0 >> 8usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 4."]
# [inline (always)]
pub fn set_pupd4 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 8usize)) | (((val as u32) & 0x03) << 8usize) ; } # [doc = "Port x configuration I/O pin 5."]
# [inline (always)]
pub const fn pupd5 (& self) -> u8 { let val = (self . 0 >> 10usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 5."]
# [inline (always)]
pub fn set_pupd5 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 10usize)) | (((val as u32) & 0x03) << 10usize) ; } # [doc = "Port x configuration I/O pin 6."]
# [inline (always)]
pub const fn pupd6 (& self) -> u8 { let val = (self . 0 >> 12usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 6."]
# [inline (always)]
pub fn set_pupd6 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 12usize)) | (((val as u32) & 0x03) << 12usize) ; } # [doc = "Port x configuration I/O pin 7."]
# [inline (always)]
pub const fn pupd7 (& self) -> u8 { let val = (self . 0 >> 14usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 7."]
# [inline (always)]
pub fn set_pupd7 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 14usize)) | (((val as u32) & 0x03) << 14usize) ; } # [doc = "Port x configuration I/O pin 8."]
# [inline (always)]
pub const fn pupd8 (& self) -> u8 { let val = (self . 0 >> 16usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 8."]
# [inline (always)]
pub fn set_pupd8 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 16usize)) | (((val as u32) & 0x03) << 16usize) ; } # [doc = "Port x configuration I/O pin 9."]
# [inline (always)]
pub const fn pupd9 (& self) -> u8 { let val = (self . 0 >> 18usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 9."]
# [inline (always)]
pub fn set_pupd9 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 18usize)) | (((val as u32) & 0x03) << 18usize) ; } # [doc = "Port x configuration I/O pin 10."]
# [inline (always)]
pub const fn pupd10 (& self) -> u8 { let val = (self . 0 >> 20usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 10."]
# [inline (always)]
pub fn set_pupd10 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 20usize)) | (((val as u32) & 0x03) << 20usize) ; } # [doc = "Port x configuration I/O pin 11."]
# [inline (always)]
pub const fn pupd11 (& self) -> u8 { let val = (self . 0 >> 22usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 11."]
# [inline (always)]
pub fn set_pupd11 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 22usize)) | (((val as u32) & 0x03) << 22usize) ; } # [doc = "Port x configuration I/O pin 12."]
# [inline (always)]
pub const fn pupd12 (& self) -> u8 { let val = (self . 0 >> 24usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 12."]
# [inline (always)]
pub fn set_pupd12 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 24usize)) | (((val as u32) & 0x03) << 24usize) ; } # [doc = "Port x configuration I/O pin 13."]
# [inline (always)]
pub const fn pupd13 (& self) -> u8 { let val = (self . 0 >> 26usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 13."]
# [inline (always)]
pub fn set_pupd13 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 26usize)) | (((val as u32) & 0x03) << 26usize) ; } # [doc = "Port x configuration I/O pin 14."]
# [inline (always)]
pub const fn pupd14 (& self) -> u8 { let val = (self . 0 >> 28usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 14."]
# [inline (always)]
pub fn set_pupd14 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 28usize)) | (((val as u32) & 0x03) << 28usize) ; } # [doc = "Port x configuration I/O pin 15."]
# [inline (always)]
pub const fn pupd15 (& self) -> u8 { let val = (self . 0 >> 30usize) & 0x03 ; val as u8 } # [doc = "Port x configuration I/O pin 15."]
# [inline (always)]
pub fn set_pupd15 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 30usize)) | (((val as u32) & 0x03) << 30usize) ; } } impl Default for Pupdr { # [inline (always)]
fn default () -> Pupdr { Pupdr (0) } } }