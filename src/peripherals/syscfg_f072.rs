#![allow(clippy::missing_safety_doc)]
                #![allow(clippy::identity_op)]
                #![allow(clippy::unnecessary_cast)]
                #![allow(clippy::erasing_op)]

# [doc = "desc SYSCFG."]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Syscfg { ptr : * mut u8 } unsafe impl Send for Syscfg { } unsafe impl Sync for Syscfg { } impl Syscfg { # [inline (always)]
pub const unsafe fn from_ptr (ptr : * mut ()) -> Self { Self { ptr : ptr as _ , } } # [inline (always)]
pub const fn as_ptr (& self) -> * mut () { self . ptr as _ } # [doc = "desc CFGR1."]
# [inline (always)]
pub const fn cfgr1 (self) -> crate :: common :: Reg < regs :: Cfgr1 , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x0usize) as _) } } # [doc = "desc CFGR2."]
# [inline (always)]
pub const fn cfgr2 (self) -> crate :: common :: Reg < regs :: Cfgr2 , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x04usize) as _) } } # [doc = "desc CFGR3."]
# [inline (always)]
pub const fn cfgr3 (self) -> crate :: common :: Reg < regs :: Cfgr3 , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x08usize) as _) } } # [doc = "desc CFGR4."]
# [inline (always)]
pub const fn cfgr4 (self) -> crate :: common :: Reg < regs :: Cfgr4 , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x0cusize) as _) } } # [doc = "desc PAENS."]
# [inline (always)]
pub const fn paens (self) -> crate :: common :: Reg < regs :: Paens , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x10usize) as _) } } # [doc = "desc PBENS."]
# [inline (always)]
pub const fn pbens (self) -> crate :: common :: Reg < regs :: Pbens , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x14usize) as _) } } # [doc = "desc PCENS."]
# [inline (always)]
pub const fn pcens (self) -> crate :: common :: Reg < regs :: Pcens , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x18usize) as _) } } # [doc = "desc PFENS."]
# [inline (always)]
pub const fn pfens (self) -> crate :: common :: Reg < regs :: Pfens , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x1cusize) as _) } } } pub mod regs { # [doc = "desc CFGR1."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Cfgr1 (pub u32) ; impl Cfgr1 { # [doc = "desc MEM_MODE."]
# [inline (always)]
pub const fn mem_mode (& self) -> u8 { let val = (self . 0 >> 0usize) & 0x03 ; val as u8 } # [doc = "desc MEM_MODE."]
# [inline (always)]
pub fn set_mem_mode (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 0usize)) | (((val as u32) & 0x03) << 0usize) ; } # [doc = "desc TIM1_IC1_SRC."]
# [inline (always)]
pub const fn tim1_ic1_src (& self) -> u8 { let val = (self . 0 >> 2usize) & 0x03 ; val as u8 } # [doc = "desc TIM1_IC1_SRC."]
# [inline (always)]
pub fn set_tim1_ic1_src (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 2usize)) | (((val as u32) & 0x03) << 2usize) ; } # [doc = "desc TIM2_IC4_SRC."]
# [inline (always)]
pub const fn tim2_ic4_src (& self) -> u8 { let val = (self . 0 >> 4usize) & 0x03 ; val as u8 } # [doc = "desc TIM2_IC4_SRC."]
# [inline (always)]
pub fn set_tim2_ic4_src (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 4usize)) | (((val as u32) & 0x03) << 4usize) ; } # [doc = "desc TIM3_IC1_SRC."]
# [inline (always)]
pub const fn tim3_ic1_src (& self) -> u8 { let val = (self . 0 >> 6usize) & 0x03 ; val as u8 } # [doc = "desc TIM3_IC1_SRC."]
# [inline (always)]
pub fn set_tim3_ic1_src (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x03 << 6usize)) | (((val as u32) & 0x03) << 6usize) ; } # [doc = "desc ETR_SRC_TIM1."]
# [inline (always)]
pub const fn etr_src_tim1 (& self) -> u8 { let val = (self . 0 >> 8usize) & 0x07 ; val as u8 } # [doc = "desc ETR_SRC_TIM1."]
# [inline (always)]
pub fn set_etr_src_tim1 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 8usize)) | (((val as u32) & 0x07) << 8usize) ; } # [doc = "desc ETR_SRC_TIM2."]
# [inline (always)]
pub const fn etr_src_tim2 (& self) -> u8 { let val = (self . 0 >> 12usize) & 0x07 ; val as u8 } # [doc = "desc ETR_SRC_TIM2."]
# [inline (always)]
pub fn set_etr_src_tim2 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 12usize)) | (((val as u32) & 0x07) << 12usize) ; } # [doc = "desc ETR_SRC_TIM3."]
# [inline (always)]
pub const fn etr_src_tim3 (& self) -> u8 { let val = (self . 0 >> 16usize) & 0x07 ; val as u8 } # [doc = "desc ETR_SRC_TIM3."]
# [inline (always)]
pub fn set_etr_src_tim3 (& mut self , val : u8) { self . 0 = (self . 0 & ! (0x07 << 16usize)) | (((val as u32) & 0x07) << 16usize) ; } # [doc = "desc GPIO_AHB_SEL."]
# [inline (always)]
pub const fn gpio_ahb_sel (& self) -> bool { let val = (self . 0 >> 24usize) & 0x01 ; val != 0 } # [doc = "desc GPIO_AHB_SEL."]
# [inline (always)]
pub fn set_gpio_ahb_sel (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 24usize)) | (((val as u32) & 0x01) << 24usize) ; } } impl Default for Cfgr1 { # [inline (always)]
fn default () -> Cfgr1 { Cfgr1 (0) } } # [doc = "desc CFGR2."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Cfgr2 (pub u32) ; impl Cfgr2 { # [doc = "desc LOCKUP_LOCK."]
# [inline (always)]
pub const fn lockup_lock (& self) -> bool { let val = (self . 0 >> 0usize) & 0x01 ; val != 0 } # [doc = "desc LOCKUP_LOCK."]
# [inline (always)]
pub fn set_lockup_lock (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 0usize)) | (((val as u32) & 0x01) << 0usize) ; } # [doc = "desc PVD_LOCK."]
# [inline (always)]
pub const fn pvd_lock (& self) -> bool { let val = (self . 0 >> 2usize) & 0x01 ; val != 0 } # [doc = "desc PVD_LOCK."]
# [inline (always)]
pub fn set_pvd_lock (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 2usize)) | (((val as u32) & 0x01) << 2usize) ; } # [doc = "desc COMP1_BRK_TIM1."]
# [inline (always)]
pub const fn comp1_brk_tim1 (& self) -> bool { let val = (self . 0 >> 3usize) & 0x01 ; val != 0 } # [doc = "desc COMP1_BRK_TIM1."]
# [inline (always)]
pub fn set_comp1_brk_tim1 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 3usize)) | (((val as u32) & 0x01) << 3usize) ; } # [doc = "desc COMP2_BRK_TIM1."]
# [inline (always)]
pub const fn comp2_brk_tim1 (& self) -> bool { let val = (self . 0 >> 4usize) & 0x01 ; val != 0 } # [doc = "desc COMP2_BRK_TIM1."]
# [inline (always)]
pub fn set_comp2_brk_tim1 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 4usize)) | (((val as u32) & 0x01) << 4usize) ; } # [doc = "desc COMP3_BRK_TIM1."]
# [inline (always)]
pub const fn comp3_brk_tim1 (& self) -> bool { let val = (self . 0 >> 5usize) & 0x01 ; val != 0 } # [doc = "desc COMP3_BRK_TIM1."]
# [inline (always)]
pub fn set_comp3_brk_tim1 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 5usize)) | (((val as u32) & 0x01) << 5usize) ; } # [doc = "desc COMP1_BRK_TIM15."]
# [inline (always)]
pub const fn comp1_brk_tim15 (& self) -> bool { let val = (self . 0 >> 6usize) & 0x01 ; val != 0 } # [doc = "desc COMP1_BRK_TIM15."]
# [inline (always)]
pub fn set_comp1_brk_tim15 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 6usize)) | (((val as u32) & 0x01) << 6usize) ; } # [doc = "desc COMP2_BRK_TIM15."]
# [inline (always)]
pub const fn comp2_brk_tim15 (& self) -> bool { let val = (self . 0 >> 7usize) & 0x01 ; val != 0 } # [doc = "desc COMP2_BRK_TIM15."]
# [inline (always)]
pub fn set_comp2_brk_tim15 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 7usize)) | (((val as u32) & 0x01) << 7usize) ; } # [doc = "desc COMP3_BRK_TIM15."]
# [inline (always)]
pub const fn comp3_brk_tim15 (& self) -> bool { let val = (self . 0 >> 8usize) & 0x01 ; val != 0 } # [doc = "desc COMP3_BRK_TIM15."]
# [inline (always)]
pub fn set_comp3_brk_tim15 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 8usize)) | (((val as u32) & 0x01) << 8usize) ; } # [doc = "desc COMP1_BRK_TIM16."]
# [inline (always)]
pub const fn comp1_brk_tim16 (& self) -> bool { let val = (self . 0 >> 9usize) & 0x01 ; val != 0 } # [doc = "desc COMP1_BRK_TIM16."]
# [inline (always)]
pub fn set_comp1_brk_tim16 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 9usize)) | (((val as u32) & 0x01) << 9usize) ; } # [doc = "desc COMP2_BRK_TIM16."]
# [inline (always)]
pub const fn comp2_brk_tim16 (& self) -> bool { let val = (self . 0 >> 10usize) & 0x01 ; val != 0 } # [doc = "desc COMP2_BRK_TIM16."]
# [inline (always)]
pub fn set_comp2_brk_tim16 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 10usize)) | (((val as u32) & 0x01) << 10usize) ; } # [doc = "desc COMP3_BRK_TIM16."]
# [inline (always)]
pub const fn comp3_brk_tim16 (& self) -> bool { let val = (self . 0 >> 11usize) & 0x01 ; val != 0 } # [doc = "desc COMP3_BRK_TIM16."]
# [inline (always)]
pub fn set_comp3_brk_tim16 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 11usize)) | (((val as u32) & 0x01) << 11usize) ; } # [doc = "desc COMP1_BRK_TIM17."]
# [inline (always)]
pub const fn comp1_brk_tim17 (& self) -> bool { let val = (self . 0 >> 12usize) & 0x01 ; val != 0 } # [doc = "desc COMP1_BRK_TIM17."]
# [inline (always)]
pub fn set_comp1_brk_tim17 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 12usize)) | (((val as u32) & 0x01) << 12usize) ; } # [doc = "desc COMP2_BRK_TIM17."]
# [inline (always)]
pub const fn comp2_brk_tim17 (& self) -> bool { let val = (self . 0 >> 13usize) & 0x01 ; val != 0 } # [doc = "desc COMP2_BRK_TIM17."]
# [inline (always)]
pub fn set_comp2_brk_tim17 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 13usize)) | (((val as u32) & 0x01) << 13usize) ; } # [doc = "desc COMP3_BRK_TIM17."]
# [inline (always)]
pub const fn comp3_brk_tim17 (& self) -> bool { let val = (self . 0 >> 14usize) & 0x01 ; val != 0 } # [doc = "desc COMP3_BRK_TIM17."]
# [inline (always)]
pub fn set_comp3_brk_tim17 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 14usize)) | (((val as u32) & 0x01) << 14usize) ; } # [doc = "desc COMP1_OCREF_CLR_TIM1."]
# [inline (always)]
pub const fn comp1_ocref_clr_tim1 (& self) -> bool { let val = (self . 0 >> 15usize) & 0x01 ; val != 0 } # [doc = "desc COMP1_OCREF_CLR_TIM1."]
# [inline (always)]
pub fn set_comp1_ocref_clr_tim1 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 15usize)) | (((val as u32) & 0x01) << 15usize) ; } # [doc = "desc COMP1_OCREF_CLR_TIM2."]
# [inline (always)]
pub const fn comp1_ocref_clr_tim2 (& self) -> bool { let val = (self . 0 >> 16usize) & 0x01 ; val != 0 } # [doc = "desc COMP1_OCREF_CLR_TIM2."]
# [inline (always)]
pub fn set_comp1_ocref_clr_tim2 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 16usize)) | (((val as u32) & 0x01) << 16usize) ; } # [doc = "desc COMP1_OCREF_CLR_TIM3."]
# [inline (always)]
pub const fn comp1_ocref_clr_tim3 (& self) -> bool { let val = (self . 0 >> 17usize) & 0x01 ; val != 0 } # [doc = "desc COMP1_OCREF_CLR_TIM3."]
# [inline (always)]
pub fn set_comp1_ocref_clr_tim3 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 17usize)) | (((val as u32) & 0x01) << 17usize) ; } # [doc = "desc COMP2_OCREF_CLR_TIM1."]
# [inline (always)]
pub const fn comp2_ocref_clr_tim1 (& self) -> bool { let val = (self . 0 >> 18usize) & 0x01 ; val != 0 } # [doc = "desc COMP2_OCREF_CLR_TIM1."]
# [inline (always)]
pub fn set_comp2_ocref_clr_tim1 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 18usize)) | (((val as u32) & 0x01) << 18usize) ; } # [doc = "desc COMP2_OCREF_CLR_TIM2."]
# [inline (always)]
pub const fn comp2_ocref_clr_tim2 (& self) -> bool { let val = (self . 0 >> 19usize) & 0x01 ; val != 0 } # [doc = "desc COMP2_OCREF_CLR_TIM2."]
# [inline (always)]
pub fn set_comp2_ocref_clr_tim2 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 19usize)) | (((val as u32) & 0x01) << 19usize) ; } # [doc = "desc COMP2_OCREF_CLR_TIM3."]
# [inline (always)]
pub const fn comp2_ocref_clr_tim3 (& self) -> bool { let val = (self . 0 >> 20usize) & 0x01 ; val != 0 } # [doc = "desc COMP2_OCREF_CLR_TIM3."]
# [inline (always)]
pub fn set_comp2_ocref_clr_tim3 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 20usize)) | (((val as u32) & 0x01) << 20usize) ; } # [doc = "desc COMP3_OCREF_CLR_TIM1."]
# [inline (always)]
pub const fn comp3_ocref_clr_tim1 (& self) -> bool { let val = (self . 0 >> 21usize) & 0x01 ; val != 0 } # [doc = "desc COMP3_OCREF_CLR_TIM1."]
# [inline (always)]
pub fn set_comp3_ocref_clr_tim1 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 21usize)) | (((val as u32) & 0x01) << 21usize) ; } # [doc = "desc COMP3_OCREF_CLR_TIM2."]
# [inline (always)]
pub const fn comp3_ocref_clr_tim2 (& self) -> bool { let val = (self . 0 >> 22usize) & 0x01 ; val != 0 } # [doc = "desc COMP3_OCREF_CLR_TIM2."]
# [inline (always)]
pub fn set_comp3_ocref_clr_tim2 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 22usize)) | (((val as u32) & 0x01) << 22usize) ; } # [doc = "desc COMP3_OCREF_CLR_TIM3."]
# [inline (always)]
pub const fn comp3_ocref_clr_tim3 (& self) -> bool { let val = (self . 0 >> 23usize) & 0x01 ; val != 0 } # [doc = "desc COMP3_OCREF_CLR_TIM3."]
# [inline (always)]
pub fn set_comp3_ocref_clr_tim3 (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 23usize)) | (((val as u32) & 0x01) << 23usize) ; } } impl Default for Cfgr2 { # [inline (always)]
fn default () -> Cfgr2 { Cfgr2 (0) } } # [doc = "desc CFGR3."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Cfgr3 (pub u32) ; impl Cfgr3 { # [doc = "DMA channel 1-4 requeset selection."]
# [inline (always)]
pub const fn dma_map (& self , n : usize) -> u8 { assert ! (n < 4usize) ; let offs = 0usize + n * 8usize ; let val = (self . 0 >> offs) & 0x3f ; val as u8 } # [doc = "DMA channel 1-4 requeset selection."]
# [inline (always)]
pub fn set_dma_map (& mut self , n : usize , val : u8) { assert ! (n < 4usize) ; let offs = 0usize + n * 8usize ; self . 0 = (self . 0 & ! (0x3f << offs)) | (((val as u32) & 0x3f) << offs) ; } } impl Default for Cfgr3 { # [inline (always)]
fn default () -> Cfgr3 { Cfgr3 (0) } } # [doc = "desc CFGR4."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Cfgr4 (pub u32) ; impl Cfgr4 { # [doc = "DMA channel 5-7 requeset selection."]
# [inline (always)]
pub const fn dma_map (& self , n : usize) -> u8 { assert ! (n < 3usize) ; let offs = 0usize + n * 8usize ; let val = (self . 0 >> offs) & 0x3f ; val as u8 } # [doc = "DMA channel 5-7 requeset selection."]
# [inline (always)]
pub fn set_dma_map (& mut self , n : usize , val : u8) { assert ! (n < 3usize) ; let offs = 0usize + n * 8usize ; self . 0 = (self . 0 & ! (0x3f << offs)) | (((val as u32) & 0x3f) << offs) ; } } impl Default for Cfgr4 { # [inline (always)]
fn default () -> Cfgr4 { Cfgr4 (0) } } # [doc = "desc PAENS."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Paens (pub u32) ; impl Paens { # [doc = "desc PA_ENS."]
# [inline (always)]
pub const fn pa_ens (& self) -> u16 { let val = (self . 0 >> 0usize) & 0xffff ; val as u16 } # [doc = "desc PA_ENS."]
# [inline (always)]
pub fn set_pa_ens (& mut self , val : u16) { self . 0 = (self . 0 & ! (0xffff << 0usize)) | (((val as u32) & 0xffff) << 0usize) ; } } impl Default for Paens { # [inline (always)]
fn default () -> Paens { Paens (0) } } # [doc = "desc PBENS."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Pbens (pub u32) ; impl Pbens { # [doc = "desc PB_ENS."]
# [inline (always)]
pub const fn pb_ens (& self) -> u16 { let val = (self . 0 >> 0usize) & 0xffff ; val as u16 } # [doc = "desc PB_ENS."]
# [inline (always)]
pub fn set_pb_ens (& mut self , val : u16) { self . 0 = (self . 0 & ! (0xffff << 0usize)) | (((val as u32) & 0xffff) << 0usize) ; } } impl Default for Pbens { # [inline (always)]
fn default () -> Pbens { Pbens (0) } } # [doc = "desc PCENS."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Pcens (pub u32) ; impl Pcens { # [doc = "desc PC_ENS."]
# [inline (always)]
pub const fn pc_ens (& self) -> u16 { let val = (self . 0 >> 0usize) & 0xffff ; val as u16 } # [doc = "desc PC_ENS."]
# [inline (always)]
pub fn set_pc_ens (& mut self , val : u16) { self . 0 = (self . 0 & ! (0xffff << 0usize)) | (((val as u32) & 0xffff) << 0usize) ; } } impl Default for Pcens { # [inline (always)]
fn default () -> Pcens { Pcens (0) } } # [doc = "desc PFENS."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Pfens (pub u32) ; impl Pfens { # [doc = "desc PF_ENS."]
# [inline (always)]
pub const fn pf_ens (& self) -> u16 { let val = (self . 0 >> 0usize) & 0xffff ; val as u16 } # [doc = "desc PF_ENS."]
# [inline (always)]
pub fn set_pf_ens (& mut self , val : u16) { self . 0 = (self . 0 & ! (0xffff << 0usize)) | (((val as u32) & 0xffff) << 0usize) ; } } impl Default for Pfens { # [inline (always)]
fn default () -> Pfens { Pfens (0) } } }