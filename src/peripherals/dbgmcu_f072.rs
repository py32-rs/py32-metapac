#![allow(clippy::missing_safety_doc)]
                #![allow(clippy::identity_op)]
                #![allow(clippy::unnecessary_cast)]
                #![allow(clippy::erasing_op)]

# [doc = "Debug support."]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Dbgmcu { ptr : * mut u8 } unsafe impl Send for Dbgmcu { } unsafe impl Sync for Dbgmcu { } impl Dbgmcu { # [inline (always)]
pub const unsafe fn from_ptr (ptr : * mut ()) -> Self { Self { ptr : ptr as _ , } } # [inline (always)]
pub const fn as_ptr (& self) -> * mut () { self . ptr as _ } # [doc = "MCU Device ID Code Register."]
# [inline (always)]
pub const fn idcode (self) -> crate :: common :: Reg < regs :: Idcode , crate :: common :: R > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x0usize) as _) } } # [doc = "Debug MCU Configuration Register."]
# [inline (always)]
pub const fn cr (self) -> crate :: common :: Reg < regs :: Cr , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x04usize) as _) } } # [doc = "APB Freeze Register1."]
# [inline (always)]
pub const fn apb_fz1 (self) -> crate :: common :: Reg < regs :: ApbFz1 , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x08usize) as _) } } # [doc = "APB Freeze Register2."]
# [inline (always)]
pub const fn apb_fz2 (self) -> crate :: common :: Reg < regs :: ApbFz2 , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x0cusize) as _) } } } pub mod regs { # [doc = "APB Freeze Register1."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct ApbFz1 (pub u32) ; impl ApbFz1 { # [doc = "Debug Timer 2 stopped when Core is halted."]
# [inline (always)]
pub const fn dbg_timer2_stop (& self) -> bool { let val = (self . 0 >> 0usize) & 0x01 ; val != 0 } # [doc = "Debug Timer 2 stopped when Core is halted."]
# [inline (always)]
pub fn set_dbg_timer2_stop (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 0usize)) | (((val as u32) & 0x01) << 0usize) ; } # [doc = "Debug Timer 3 stopped when Core is halted."]
# [inline (always)]
pub const fn dbg_timer3_stop (& self) -> bool { let val = (self . 0 >> 1usize) & 0x01 ; val != 0 } # [doc = "Debug Timer 3 stopped when Core is halted."]
# [inline (always)]
pub fn set_dbg_timer3_stop (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 1usize)) | (((val as u32) & 0x01) << 1usize) ; } # [doc = "Debug Timer 6 stopped when Core is halted."]
# [inline (always)]
pub const fn dbg_timer6_stop (& self) -> bool { let val = (self . 0 >> 4usize) & 0x01 ; val != 0 } # [doc = "Debug Timer 6 stopped when Core is halted."]
# [inline (always)]
pub fn set_dbg_timer6_stop (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 4usize)) | (((val as u32) & 0x01) << 4usize) ; } # [doc = "Debug Timer 7 stopped when Core is halted."]
# [inline (always)]
pub const fn dbg_timer7_stop (& self) -> bool { let val = (self . 0 >> 5usize) & 0x01 ; val != 0 } # [doc = "Debug Timer 7 stopped when Core is halted."]
# [inline (always)]
pub fn set_dbg_timer7_stop (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 5usize)) | (((val as u32) & 0x01) << 5usize) ; } # [doc = "Debug RTC stopped when Core is halted."]
# [inline (always)]
pub const fn dbg_rtc_stop (& self) -> bool { let val = (self . 0 >> 10usize) & 0x01 ; val != 0 } # [doc = "Debug RTC stopped when Core is halted."]
# [inline (always)]
pub fn set_dbg_rtc_stop (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 10usize)) | (((val as u32) & 0x01) << 10usize) ; } # [doc = "Debug Window Wachdog stopped when Core is halted."]
# [inline (always)]
pub const fn dbg_wwdg_stop (& self) -> bool { let val = (self . 0 >> 11usize) & 0x01 ; val != 0 } # [doc = "Debug Window Wachdog stopped when Core is halted."]
# [inline (always)]
pub fn set_dbg_wwdg_stop (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 11usize)) | (((val as u32) & 0x01) << 11usize) ; } # [doc = "Debug Independent Wachdog stopped when Core is halted."]
# [inline (always)]
pub const fn dbg_iwdg_stop (& self) -> bool { let val = (self . 0 >> 12usize) & 0x01 ; val != 0 } # [doc = "Debug Independent Wachdog stopped when Core is halted."]
# [inline (always)]
pub fn set_dbg_iwdg_stop (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 12usize)) | (((val as u32) & 0x01) << 12usize) ; } # [doc = "DBG_CAN_STOP."]
# [inline (always)]
pub const fn dbg_can_stop (& self) -> bool { let val = (self . 0 >> 19usize) & 0x01 ; val != 0 } # [doc = "DBG_CAN_STOP."]
# [inline (always)]
pub fn set_dbg_can_stop (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 19usize)) | (((val as u32) & 0x01) << 19usize) ; } # [doc = "DBG_I2C1_SMBUS_TIMEOUT."]
# [inline (always)]
pub const fn dbg_i2c1_smbus_timeout (& self) -> bool { let val = (self . 0 >> 21usize) & 0x01 ; val != 0 } # [doc = "DBG_I2C1_SMBUS_TIMEOUT."]
# [inline (always)]
pub fn set_dbg_i2c1_smbus_timeout (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 21usize)) | (((val as u32) & 0x01) << 21usize) ; } # [doc = "DBG_I2C2_SMBUS_TIMEOUT."]
# [inline (always)]
pub const fn dbg_i2c2_smbus_timeout (& self) -> bool { let val = (self . 0 >> 22usize) & 0x01 ; val != 0 } # [doc = "DBG_I2C2_SMBUS_TIMEOUT."]
# [inline (always)]
pub fn set_dbg_i2c2_smbus_timeout (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 22usize)) | (((val as u32) & 0x01) << 22usize) ; } # [doc = "Debug LPTIM stopped when Core is halted."]
# [inline (always)]
pub const fn dbg_lptim_stop (& self) -> bool { let val = (self . 0 >> 31usize) & 0x01 ; val != 0 } # [doc = "Debug LPTIM stopped when Core is halted."]
# [inline (always)]
pub fn set_dbg_lptim_stop (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 31usize)) | (((val as u32) & 0x01) << 31usize) ; } } impl Default for ApbFz1 { # [inline (always)]
fn default () -> ApbFz1 { ApbFz1 (0) } } # [doc = "APB Freeze Register2."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct ApbFz2 (pub u32) ; impl ApbFz2 { # [doc = "Debug Timer 1 stopped when Core is halted."]
# [inline (always)]
pub const fn dbg_timer1_stop (& self) -> bool { let val = (self . 0 >> 11usize) & 0x01 ; val != 0 } # [doc = "Debug Timer 1 stopped when Core is halted."]
# [inline (always)]
pub fn set_dbg_timer1_stop (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 11usize)) | (((val as u32) & 0x01) << 11usize) ; } # [doc = "Debug Timer 14 stopped when Core is halted."]
# [inline (always)]
pub const fn dbg_timer14_stop (& self) -> bool { let val = (self . 0 >> 15usize) & 0x01 ; val != 0 } # [doc = "Debug Timer 14 stopped when Core is halted."]
# [inline (always)]
pub fn set_dbg_timer14_stop (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 15usize)) | (((val as u32) & 0x01) << 15usize) ; } # [doc = "Debug Timer 15 stopped when Core is halted."]
# [inline (always)]
pub const fn dbg_timer15_stop (& self) -> bool { let val = (self . 0 >> 16usize) & 0x01 ; val != 0 } # [doc = "Debug Timer 15 stopped when Core is halted."]
# [inline (always)]
pub fn set_dbg_timer15_stop (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 16usize)) | (((val as u32) & 0x01) << 16usize) ; } # [doc = "Debug Timer 16 stopped when Core is halted."]
# [inline (always)]
pub const fn dbg_timer16_stop (& self) -> bool { let val = (self . 0 >> 17usize) & 0x01 ; val != 0 } # [doc = "Debug Timer 16 stopped when Core is halted."]
# [inline (always)]
pub fn set_dbg_timer16_stop (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 17usize)) | (((val as u32) & 0x01) << 17usize) ; } # [doc = "Debug Timer 17 stopped when Core is halted."]
# [inline (always)]
pub const fn dbg_timer17_stop (& self) -> bool { let val = (self . 0 >> 18usize) & 0x01 ; val != 0 } # [doc = "Debug Timer 17 stopped when Core is halted."]
# [inline (always)]
pub fn set_dbg_timer17_stop (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 18usize)) | (((val as u32) & 0x01) << 18usize) ; } } impl Default for ApbFz2 { # [inline (always)]
fn default () -> ApbFz2 { ApbFz2 (0) } } # [doc = "Debug MCU Configuration Register."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Cr (pub u32) ; impl Cr { # [doc = "Debug Sleep Mode."]
# [inline (always)]
pub const fn dbg_sleep (& self) -> bool { let val = (self . 0 >> 0usize) & 0x01 ; val != 0 } # [doc = "Debug Sleep Mode."]
# [inline (always)]
pub fn set_dbg_sleep (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 0usize)) | (((val as u32) & 0x01) << 0usize) ; } # [doc = "Debug Stop Mode."]
# [inline (always)]
pub const fn dbg_stop (& self) -> bool { let val = (self . 0 >> 1usize) & 0x01 ; val != 0 } # [doc = "Debug Stop Mode."]
# [inline (always)]
pub fn set_dbg_stop (& mut self , val : bool) { self . 0 = (self . 0 & ! (0x01 << 1usize)) | (((val as u32) & 0x01) << 1usize) ; } } impl Default for Cr { # [inline (always)]
fn default () -> Cr { Cr (0) } } # [doc = "MCU Device ID Code Register."]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Idcode (pub u32) ; impl Idcode { # [doc = "REV_ID."]
# [inline (always)]
pub const fn rev_id (& self) -> u32 { let val = (self . 0 >> 0usize) & 0x7fff_ffff ; val as u32 } # [doc = "REV_ID."]
# [inline (always)]
pub fn set_rev_id (& mut self , val : u32) { self . 0 = (self . 0 & ! (0x7fff_ffff << 0usize)) | (((val as u32) & 0x7fff_ffff) << 0usize) ; } } impl Default for Idcode { # [inline (always)]
fn default () -> Idcode { Idcode (0) } } }