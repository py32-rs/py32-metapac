#![allow(clippy::missing_safety_doc)]
                #![allow(clippy::identity_op)]
                #![allow(clippy::unnecessary_cast)]
                #![allow(clippy::erasing_op)]

# [doc = "External interrupt/event. controller."]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Exti { ptr : * mut u8 } unsafe impl Send for Exti { } unsafe impl Sync for Exti { } impl Exti { # [inline (always)]
pub const unsafe fn from_ptr (ptr : * mut ()) -> Self { Self { ptr : ptr as _ , } } # [inline (always)]
pub const fn as_ptr (& self) -> * mut () { self . ptr as _ } # [doc = "Rising Trigger selection register"]
# [inline (always)]
pub const fn rtsr (self) -> crate :: common :: Reg < regs :: Lines , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x0usize) as _) } } # [doc = "Falling Trigger selection register"]
# [inline (always)]
pub const fn ftsr (self) -> crate :: common :: Reg < regs :: Lines , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x04usize) as _) } } # [doc = "Software interrupt event register"]
# [inline (always)]
pub const fn swier (self) -> crate :: common :: Reg < regs :: Lines , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x08usize) as _) } } # [doc = "EXTI pending register."]
# [inline (always)]
pub const fn pr (self) -> crate :: common :: Reg < regs :: Lines , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x0cusize) as _) } } # [doc = "EXTI external interrupt selection register."]
# [inline (always)]
pub const fn exticr (self , n : usize) -> crate :: common :: Reg < regs :: Exticr , crate :: common :: RW > { assert ! (n < 4usize) ; unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x60usize + n * 4usize) as _) } } # [doc = "EXTI CPU wakeup with interrupt mask register."]
# [inline (always)]
pub const fn imr (self) -> crate :: common :: Reg < regs :: Lines , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x80usize) as _) } } # [doc = "EXTI CPU wakeup with event mask. register."]
# [inline (always)]
pub const fn emr (self) -> crate :: common :: Reg < regs :: Lines , crate :: common :: RW > { unsafe { crate :: common :: Reg :: from_ptr (self . ptr . add (0x84usize) as _) } } } pub mod regs { # [doc = "external interrupt configuration register 1"]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Exticr (pub u32) ; impl Exticr { # [doc = "EXTI configuration bits"]
# [inline (always)]
pub const fn exti (& self , n : usize) -> u8 { assert ! (n < 4usize) ; let offs = 0usize + n * 8usize ; let val = (self . 0 >> offs) & 0x03 ; val as u8 } # [doc = "EXTI configuration bits"]
# [inline (always)]
pub fn set_exti (& mut self , n : usize , val : u8) { assert ! (n < 4usize) ; let offs = 0usize + n * 8usize ; self . 0 = (self . 0 & ! (0x03 << offs)) | (((val as u32) & 0x03) << offs) ; } } impl Default for Exticr { # [inline (always)]
fn default () -> Exticr { Exticr (0) } } # [doc = "EXTI lines register, 1 bit per line"]
# [repr (transparent)]
# [derive (Copy , Clone , Eq , PartialEq)]
pub struct Lines (pub u32) ; impl Lines { # [doc = "EXTI line"]
# [inline (always)]
pub const fn line (& self , n : usize) -> bool { assert ! (n < 32usize) ; let offs = 0usize + n * 1usize ; let val = (self . 0 >> offs) & 0x01 ; val != 0 } # [doc = "EXTI line"]
# [inline (always)]
pub fn set_line (& mut self , n : usize , val : bool) { assert ! (n < 32usize) ; let offs = 0usize + n * 1usize ; self . 0 = (self . 0 & ! (0x01 << offs)) | (((val as u32) & 0x01) << offs) ; } } impl Default for Lines { # [inline (always)]
fn default () -> Lines { Lines (0) } } }